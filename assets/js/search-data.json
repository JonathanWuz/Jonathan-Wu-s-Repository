{
  
    
        "post0": {
            "title": "Notebook - Data Related to User Guide",
            "content": "NOTE . As you follow along, make sure to fill in the blanks and complete the coding exercises! . Introduction . When building an application that requires users to create accounts or sign in, handling data related to users is crucial. This data can include things like user profiles, preferences, and activity logs, which can be used to personalize the user experience and improve the application&#39;s performance. . For example, by storing a user&#39;s name and profile picture, the application can address the user by name and display their picture, creating a more personal experience. Activity logs can also be used to track user behavior and help the application recommend new features or improvements. . By learning how to handle data related to users effectively and responsibly, you&#39;ll be equipped with the skills and knowledge needed to build robust and user-friendly applications that meet the needs of your users. . For simplicity purposes, we will be lecturing on how one can store and manipulate user data for future utilization. . Here we go! . Establishing Class/User Data and making a new user . In Python, classes are templates used to create objects, which are instances of those classes. Classes define the data elements (_) and methods that describe the behavior of the objects. Let&#39;s explore how to define a class and create objects in Python. . Example: Defining a User class . class User: def __init__(self, username, email): self.username = username self.email = email def display_info(self): print(f&quot;Username: {self.username}, Email: {self.email}&quot;) . In this example, we define a User class with a constructor method init that takes username and email as arguments. The display_info method is used to print the user information. . In the context of backend functionality, this class can be used to , _, and _ user data. For example, when a new user signs up for an account, you could create a new User object with their username and email. This object can then be used to perform various operations, such as validating the user&#39;s input, storing the user&#39;s data in a database, or __. . Creating a new user: . new_user = User(&quot;john_doe&quot;, &quot;john@example.com&quot;) new_user.display_info() . Lecture Topics: . Establishing Class/User Data and making a new user . In Python, classes are _ used to create _, which are _ of those classes. Classes define the data elements (attributes) and methods that describe the behavior of the objects. Let&#39;s explore how to define a class and create objects in Python. . Example: Defining a User class . class User: def init(self, username, email): self.username = username self.email = email . def display_info(self): print(f&quot;Username: {self.username}, Email: {self.email}&quot;) . In this example, we define a User class with a constructor method init that takes username and email as arguments. The display_info method is used to print the user information. . Creating a new user: . python . new_user = User(&quot;john_doe&quot;, &quot;john@example.com&quot;) new_user.display_info() . Here, we create a new User object, new_user, with a specified username and email. We then call the display_info method to display the user&#39;s information. . Using property decorators (getter and setter) . _ allow developers to access and modify instance data more concisely. The @property decorator creates a getter method, while the @attribute.setter decorator creates a setter method. . Example: . class Employee: def __init__(self, employee_id, name): self._employee_id = employee_id self._name = name @property def name(self): return self._name @name.setter def name(self, new_name): self._name = new_name . In this example, the Employee class has a name attribute, which is accessed and modified through the name property getter and setter methods. The _name attribute uses an underscore prefix, which is a convention to indicate it should not be accessed directly. . In the context of backend functionality, this Employee class can be used to model employees within an application. You can create instances of this class to store and manage employee data, and the getter and setter methods can be used to access and modify employee information in a ___. . Usage: . employee = Employee(1001, &quot;John Doe&quot;) print(employee.name) # Get the name using the getter method employee.name = &quot;Jane Doe&quot; # Set the name using the setter method print(employee.name) . employee = Employee(1001, &quot;John Doe&quot;) print(employee.name) # Get the name using the getter method . employee.name = &quot;Jane Doe&quot; # Set the name using the setter method print(employee.name) . In the context of backend functionality, the getter and setter methods provide a clean and controlled way to access and modify the attributes of an object. This can be particularly useful when interacting with databases, APIs, or other parts of a web application that require the management and manipulation of object attributes. . CHECK: Explain the function of getters and setters in your own words. . class Car: def __init__(self, make, model, year): self._make = make self._model = model self._year = year @property def make(self): return self._make @make.setter def make(self, new_make): self._make = new_make @property def model(self): return self._model @model.setter def model(self, new_model): self._model = new_model @property def year(self): return self._year @year.setter def year(self, new_year): self._year = new_year . Take notes here on property decorators and the purpose they serve: . Students can then practice creating instances of their Car class and using the getter and setter methods to access and modify the car attributes. . In the context of _, this Car class can be used to model cars within an application. You can create instances of this class to store and manage car data, and the getter and setter methods can be used to access and modify car information in a controlled way. . Overview . WE COVERED: In conclusion, we have covered essential concepts in object-oriented programming using Python, including: . Defining classes and creating objects Property decorators (getter and setter) Class methods and static methods Inheritance and method overriding Working with multiple objects and class attributes . These concepts provide a solid foundation for understanding how to model real-world entities using classes and objects in Python. By learning to work with classes, objects, and their methods, students can develop more efficient and modular code. . As students become more comfortable with these concepts, they can explore more advanced topics, such as multiple inheritance, abstract classes, encapsulation, and polymorphism. Additionally, they can apply these principles to practical projects like web development with Flask and SQLite, as discussed earlier. . Overall, mastering object-oriented programming will greatly enhance students&#39; ability to develop complex and maintainable software systems. . Databases and SQlite . SQLite is a ___ library that provides a relational database management system. Unlike other databases, such as MySQL or PostgreSQL, SQLite is embedded within an application, which means it does not require a separate server process to operate. This makes SQLite a great choice for small-scale applications or for use in situations where you don&#39;t want to set up a full database server. . In this lesson, we will be demonstrating how to set up a SQLite database in Flask, which provides an easy-to-use interface for interacting with SQLite databases, and we&#39;ll walk through the process of setting up a new database, creating tables, and adding data. We&#39;ll also cover some basic SQL commands that you can use to interact with your database, including CREATE TABLE, INSERT, SELECT, UPDATE, and DELETE. By the end of this lesson, you&#39;ll have a good understanding of how to work with SQLite databases in Flask and be ready to start building your own __. . Setting up a SQLite database in Flask . One of the key features of _ is its ability to work seamlessly with _, including SQLite. A database is a collection of data stored in an organized manner that can be easily accessed, managed, and updated. . SQlite databse in Flask . from flask import Flask import sqlite3 # Create a Flask application app = Flask(__name__) # Connect to the SQLite database using SQLite3 conn = sqlite3.connect(&#39;example.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() # Create a table in the database using SQL commands cursor.execute(&#39;&#39;&#39;CREATE TABLE example_table (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)&#39;&#39;&#39;) # Commit the changes to the database conn.commit() # Close the connection conn.close() . Basic SQL commands (create, read, update, delete) . __ is really useful because it helps people do a bunch of things with the data stored in databases. For example, they can use it to create new tables to organize data, add new data to a table, update data that&#39;s already there, or delete data that&#39;s no longer needed. . CRUD is an acronym that stands for the fundamental operations that can be performed on a database, which are Create, Read, Update, and Delete. A widely-used lightweight database management system is SQLite, which can be easily integrated with different programming languages. . C: To create a new record in a database, you must first define the table structure that will store the data. This can be accomplished using SQL commands such as CREATE. Once the table is created, data can be added to it using the INSERT INTO command. . | R: To retrieve data from the database, you can use the READ command. You can specify which fields you want to retrieve and the conditions you want to apply using the WHERE clause. There are also several functions available to aggregate and manipulate data. . | U: To modify existing data in the database, you can use the UPDATE command. You will need to specify which table and fields you want to update, and the conditions you want to apply using the WHERE clause. . | D: To remove data from the database, you can use the DELETE command . | . Take notes here on the basic components of SQL: . import sqlite3 def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . This block of code is a menu function that helps with _, , _, and (CRUD) tasks and displays the schema. The menu function acts as a control point that directs the program to call different functions based on what the user wants to do. When users enter their preferred action, the input is checked to see which function to use. The menu function is created with no arguments and is called repeatedly, displaying the menu options until the user decides to leave. . Creating a Database . import sqlite3 def create_database(): # Connect to the database (will create it if it doesn&#39;t exist) connection = sqlite3.connect(&#39;instance/professors.db&#39;) cursor = connection.cursor() # Create the professors table if it doesn&#39;t already exist cursor.execute(&#39;&#39;&#39;CREATE TABLE IF NOT EXISTS professors ( name TEXT, field TEXT, rating REAL, reviews TEXT )&#39;&#39;&#39;) # Commit changes and close the connection connection.commit() connection.close() # Call the function to create the database create_database() . Create Function: . import sqlite3 def create(): database = &#39;instance/professors.db&#39; name = input(&quot;Enter the professor&#39;s name: &quot;) field = input(&quot;Enter the professor&#39;s field of expertise: &quot;) rating = input(&quot;Enter the professor&#39;s rating (out of 10): &quot;) reviews = input(&quot;Enter any reviews or comments about the professor: &quot;) # Connect to the database and create a cursor to execute SQL commands connection = sqlite3.connect(database) cursor = connection.cursor() try: # Execute SQL to insert record into db cursor.execute(&quot;INSERT INTO professors (name, field, rating, reviews) VALUES (?, ?, ?, ?)&quot;, (name, field, rating, reviews)) # Commit the changes connection.commit() print(f&quot;{name} has been added to the list of coding professors.&quot;) except sqlite3.Error as error: print(&quot;Error while inserting record&quot;, error) # Close cursor and connection cursor.close() connection.close() create() . The _ function allows users to input information about a coding professor and store it in a SQLite database named &#39;professors.db&#39;. This script prompts the user for the professor&#39;s name, field of expertise, rating out of 10, and any reviews or comments about the professor. It then establishes a connection to the SQLite database and creates a cursor object for executing SQL commands. . Read Function . import sqlite3 def read(): try: # Open a connection to the database and create a cursor connection = sqlite3.connect(&#39;instance/professors.db&#39;) cursor = connection.cursor() # Fetch all records from the professors table cursor.execute(&quot;SELECT * FROM professors&quot;) rows = cursor.fetchall() # If there are any records, print them if len(rows) &gt; 0: print(&quot;List of coding professors:&quot;) for row in rows: print(f&quot;Name: {row[0]} nField of expertise: {row[1]} nRating: {row[2]} nReviews: {row[3]} n&quot;) else: print(&quot;There are no coding professors in the list.&quot;) except sqlite3.Error as error: print(&quot;Error while connecting to the database:&quot;, error) finally: # Close the cursor and the connection to the database cursor.close() connection.close() read() . This code demonstrates how to read data from a SQLite database using Python and the _. The first step is to establish a connection to the database and create a cursor object to execute SQL commands. Then, a SELECT query is executed to fetch all records from the &quot;professors&quot; table. If there are any records, the code iterates through each record and prints out the name, field of expertise, rating, and reviews for each coding professor. If there are no records in the table, a message indicating so is printed. . Update Function . import sqlite3 def update(): database = &#39;instance/professors.db&#39; connection = sqlite3.connect(database) cursor = connection.cursor() try: # Get the professor&#39;s name to update name = input(&quot;Enter the name of the professor to update: &quot;) # Retrieve the current record from the database cursor.execute(&quot;SELECT * FROM professors WHERE name=?&quot;, (name,)) record = cursor.fetchone() # If the professor is found, update the record if record: print(&quot;Enter the new information for the professor:&quot;) field = input(f&quot;Current field: {record[1]} nNew field: &quot;) rating = input(f&quot;Current rating: {record[2]} nNew rating: &quot;) reviews = input(f&quot;Current reviews: {record[3]} nNew reviews: &quot;) # Execute SQL to update the record cursor.execute(&quot;UPDATE professors SET field=?, rating=?, reviews=? WHERE name=?&quot;, (field, rating, reviews, name)) connection.commit() print(f&quot;{name}&#39;s record has been updated.&quot;) # If the professor is not found, notify the user else: print(f&quot;No record found for {name}.&quot;) except sqlite3.Error as error: print(&quot;Error while updating record&quot;, error) # Close cursor and connection cursor.close() connection.close() update () . This is an implementation of an update function for the professors database using the sqlite3 module in Python. The function first establishes a connection to the database file &#39;instance/professors.db&#39; and creates a cursor object to execute commands. It prompts the user to enter the name of the professor to update and retrieves the corresponding record from the database using a SELECT statement with a WHERE clause to match the professor&#39;s name. If the professor is found in the database, the user is prompted to enter new information for the professor&#39;s field of expertise, rating, and reviews. The function then executes an statement with the new information to update the record in the database. . Delete Function . import sqlite3 def delete(): # Connect to the database and create a cursor connection = sqlite3.connect(&#39;instance/professors.db&#39;) cursor = connection.cursor() # Prompt the user for the name of the professor to delete name = input(&quot;Enter the name of the professor you want to delete: &quot;) # Use a SQL query to find the professor with the given name cursor.execute(&quot;SELECT * FROM professors WHERE name=?&quot;, (name,)) row = cursor.fetchone() # If the professor exists, confirm deletion and delete the record if row: confirm = input(f&quot;Are you sure you want to delete {name}? (y/n): &quot;) if confirm.lower() == &#39;y&#39;: cursor.execute(&quot;DELETE FROM professors WHERE name=?&quot;, (name,)) connection.commit() print(f&quot;{name} has been deleted from the list of coding professors.&quot;) else: print(f&quot;{name} not found in the list of coding professors.&quot;) # Close the cursor and the connection to the database cursor.close() connection.close() delete() . This code is a Python function for __ a record from a SQLite database. The function prompts the user to input the name of the professor they want to delete. It then uses a SQL query to search for the professor in the database. If the professor is found, the user is prompted to confirm the deletion. If the user confirms, the function executes a SQL command to delete the record from the database. The function also prints a message confirming that the professor has been deleted from the list of coding professors. If the professor is not found in the database, the function prints a message indicating that the professor is not in the list. . Our Project ... in the works . SAM Messaging System . Get started with your own! . import sqlite3 # specify the name of the database file db_file = &quot;&lt;fill in the name of the database file here&gt;.db&quot; # create a connection to the database conn = sqlite3.connect(db_file) # create a cursor object cursor = conn.cursor() # add code here to create tables and insert data into the database # commit the changes and close the connection conn.commit() conn.close() . HACKS . Make sure to fill in all blanks, take notes when prompted, and at least attempt each of the interactive coding exercises. (0.45) . | Create your own database and create an algorithm that can insert, update, and delete data ralted to user. Points will be awarded based on effort and success. (0.45) . Extra Credit: Connect your backend to a visible frontend! | . | .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/2023/04/27/P5Y-Team-SAME-Now.html",
            "relUrl": "/2023/04/27/P5Y-Team-SAME-Now.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Big Idea 3, Simulations and SQLite Lesson Notes",
            "content": "Review Topics . All of the topics below are things that have been heavily covered and used throughout the class. We will mostly be focusing on more complicated uses and mechanics of these topics. . Lists . What are Lists? Lists are an ordered sequence of elements, where each element is a variable | Unlike dictionaries, lists&#39; keys are all integers that describe the order of the list | . | . Some examples of lists: . Playlist of songs | names of students in a class | contacts on your phone . | Each element of a string is referenced by an index (which is a number) and they generally start 0 but for the AP Exam it starts at 1. . AP Exam: 1,2,3,4 etc. | Python: 0,1,2,3 etc. | . | . How do lists Manage Complexity of a program? . We may not need as many variables. For example: One Variable that holds all students would be better than having a variable for EACH student | There can also be a list of test scores so if they need to be curved then the same calculation can be applied to the list (that has all the students) instead of doing the calculations one at a time | . | . Answer the following questions about the code block below: . Why do you think lists are helpful? What word does College Board like to use to describe the function of lists? | Lists are helpful because they can store a set of similar information or data. This can be helpful for trying to sort through things. For example, if I wanted to find a specific song through a list of different songs, it would be most efficient to sort through an organized list rather than each song indivisulally. | Lists can also manage complexity and reduce unnecessary functions. | . # variable of type string name = &quot;Sri Kotturi&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 16 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;, &quot;html&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[2]&quot;, langs[2], type(langs[2])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . Mathematical Expressions . What is the output of the cell below? What Mathematical Expressions do you see being used? (List them below.) . The output is the average of grade 1 and grade 2 and since grade 1 is 10 and grade 2 is equal to grade 1 which is equal to 10, the average will be 10 and the output will be 10. | I see the + being used and // floor division mathematical functions being used. | . grade1 = 10 grade2 = grade1 average_grade = (grade1 + grade2) // 2 #what are these two slashes? print(average_grade) . What is the value of num1, num2, and num3? Explain how each number ended up what it was. . The value of num1 is 4**6 which is 4 to the power of 6 which is 4096 | The value of num3 is the remainder of num1 which is 4096 divided by 5 which is equal to 1 | num2 is the sume of (num1 and num2) with the floor division of 9 which is equal to 455 | . num1 = 2 num2 = 4 num3 = 6 num1 = num2 ** num3 num3 = num1 % 5 num2 = (num1 + num3) // 9 print(num1) print(num2) print(num3) . Selection . Selection refers to the process of making decisions in a program based on certain conditions. It is normally done with conditional statements. . Conditionals . What is a conditional?: . Statement that allows code to execute different instructions if a certain condition is true or false | Allows program to make decisions based on data and input | . What are the main types of conditional statements?: . if | elif | else | . If statements . The if statement is used to check if a certain condition is true. The condition can be any expression that evaulates to a boolean value, True or False. If the condition is True, then it executes a code block. | If (condition) then (consequence) | Example: | . x = int(input(&quot;Enter a number&quot;)) if x &gt; 0: # if condition, check if this is true of false print(&quot;x is positive&quot;) # code that will execute if condition is met . Else . The else statemnt executes a code block when the if condition is False. | If (condition) then (consequence A), else (consequence B) | . Elif . The elif statement can check subsequent conditions in a sequence, and execute a certain block of code if any of the conditions are true. | If (condition) then (consequence A), elif (condition) then (consequence B), else (consequence C) . | Example adding onto the code from before to take negative numbers and 0 into account . | . x = int(input(&quot;Enter a number, x:&quot;)) if x &gt; 0: # if condition, check if this is true of false print(&quot;x is positive&quot;) # code that will execute if condition is met elif x &lt; 0: # if previous condition not true... elif condition, check if this is true of false print(&quot;x is negative&quot;)# code that will execute if condition is met else: # everything else, in this case it is if x == 0 print(&quot;x is zero&quot;) # only executes if all previous conditions are not met . Nested Conditionals . What is a nested conditional?: . Conditional statement inside another conditional statement | Allows to check for more complex condition where one condition depends on another | . Nested Conditional Statements . Example | . x = int(input(&quot;Enter a number, x:&quot;)) if x % 2 == 0: print(&quot;x is even divisible by 2&quot;) # only ever checks is x is divisble by 3 if x is even. nested conditional if x % 3 == 0: print(&quot;x is divisible by 3&quot;) else: print(&quot;x is not divisible by 3&quot;) else: print(&quot;x is odd&quot;) . Indentation . When using conditionals and nested conditionals in Python, it is important to pay attention to the level of indentation in the code. The code inside the if, elif, and else blocks must be indented so they are nested wihtin the outer statements. This way, Python knows which code belongs to which block. . Binary Search . What is binary search and what is it used for?: . searching algorithm | Find and select a specific element in a sorted list of elements | . How does binary search work?: . Repeatedly divides the search interval in half to find the middle element and compares the middle value to the target value, if not the same then it continues on to either the lower or upper half | Eliminate half of the remaining search interval elements each time | Efficient way to search for element in large dataset | . What is the time complexity and why?: . O(log(N)) | The maximum number of iterations is the amount of times the list can be divided in half until it reaches 1 number | Dividing by 2, so it is log2(N), logarigthm of n base 2 . | You may recognize the example below from the binary lesson last Friday . | . import random def binary_search_game(): low = 1 high = 100 target = random.randint(low, high) while True: guess = (low + high) // 2 print(f&quot;Is your number {guess}?&quot;) response = input(&quot;Enter &#39;higher&#39;, &#39;lower&#39;, or &#39;yes&#39;: &quot;) # conditional statements to check target number and guess if response == &#39;yes&#39;: print(f&quot;I guessed your number {guess}!&quot;) break elif response == &#39;higher&#39;: low = guess + 1 elif response == &#39;lower&#39;: high = guess - 1 else: print(&quot;Invalid input, please enter &#39;higher&#39;, &#39;lower&#39;, or &#39;yes&#39;.&quot;) binary_search_game() . Quick Hack . Write a program using conditionals and nested conditionals . Ideas: Quiz, game (rock paper scissors, guess number), etc | . . Introduction to Algorithms . an algorithm is a set of instructions that describes how to solve a problem or perform a specific task using a computer program. | It is a precise sequence of computational steps that take an input and produce an output | . How do Algorithms relate to data structures? . Algorithms often rely on specific data structures to solve problems efficiently. | Sorting algorithms require a data structure such as an array or a linked list to store and manipulate data. | Searching algorithms such as binary search require data structures like arrays or trees to organize and search through data. | . Important Terms . What is an algorithm? . it is a finite set of instructions that accomplishes a specific task | . Sequencing . means that there is an order in which to do things | . Selection . Helps to choose two different outcomes based off of a decision that the programmer wants to make | . Iteration . Repeat something until the condition is met. (also referred to as repetition) | . Calling and Developing Procedures . A procedure is a sequence that performs a specific task. | To call a procedure, you need to know its name and any arguments it requires. | When a procedure is called, the program jumps to its instruction and starts executing it. | The arguments passed to a procedure can be used within the procedure to perform tasks or calculations. | After the procedure has completed its task, it returns control back to the calling program. | . def add_numbers(a, b): sum = a + b print(&quot;The sum of&quot;, a, &quot;and&quot;, b, &quot;is&quot;, sum) # Call the procedure with arguments 5 and 7 add_numbers(5, 7) . The result of the procedure can be stored in a variable, printed to the screen, or used in any other way that is required by the program. | Procedures can be defined within the same program or in external files, and can be reused across multiple parts of the program. | To avoid errors and improve code readability, it&#39;s important to define and call procedures with proper syntax and conventions that are appropriate for the programming language you&#39;re using. | . def calculate_average(numbers): total = sum(numbers) count = len(numbers) average = total / count return average # Call the procedure with a list of numbers numbers_list = [10, 20, 30, 40, 50] result = calculate_average(numbers_list) # Display the result print(&quot;The average of&quot;, numbers_list, &quot;is&quot;, result) . Algorithmic Efficiency . Algorithmic efficiency refers to the amount of time and resources needed to execute an algorithm. | The efficiency of an algorithm can be measured in terms of its time complexity and space complexity. . Time complexity refers to the amount of time required by an algorithm to complete its task as a function of its input size. | Space complexity refers to the amount of memory required by an algorithm to complete its task as a function of its input size. | can be analyzed using Big O Notation, which provides an upper bound on the worst-case time and space complexity of the algorithm. &lt;/br&gt; | . | What is the time complexity of the following code: . O(N) | O(N*log(N)) | O(N * Sqrt(N)) | O(N*N) | . | . a = 0 for i in range(N): for j in reversed(range(i, N)): a = a + i + j . What will be the time complexity of the following code? . n | (n+1) | n(n-1) | n(n+1) | . value = 0 for i in range(n): #iterates &quot;n&quot; times, with &quot;i&quot; taking on values from 0 to n-1. for j in range(i): # iterates &quot;i&quot; times, with &quot;j&quot; taking on values from 0 to i-1. value=value+1 . Efficiency can be improved by optimizing algorithms or by using more efficient data structures and algorithms. Some common techniques for improving efficiency include reducing the size of input data, caching results, and parallelizing tasks. | Understanding algorithmic efficiency is important in software development, as it can impact the performance of applications and their ability to scale with larger data sets. | . | . Iteration and Simulations . Simulations are models or real world phenomenon or systems that use mathematical algorithms and computer programs simulate the real behavior and aspects of the subject being modeled. . Simulations are most often used to model complex or time-consuming things that would be difficult to test in real life, such as modeling the spread of diseases in certain ecosystems or testing the functionality of a potential product before it is made. . In this lesson, we will be looking at lists, iteration, and random values through the lens of simulations. . PLEASE RUN THE CODE BELOW BEFORE INTERACTING WITH THE CODE SEGMENTS IN THIS SECTION! . class Card: def __init__(self, suit, val): self.suit = suit self.val = val if val == 11: self.kind = &quot;Ace&quot; elif val == 12: self.kind = &quot;Jack&quot; elif val == 13: self.kind = &quot;Queen&quot; elif val == 14: self.kind = &quot;King&quot; else: self.kind = str(self.val) #return a formatted string version of a card def show(self): return f&quot;{self.kind} of {self.suit}&quot; #adjust aces to prevent breaking def ace_adj(self): if self.kind == &quot;Ace&quot;: self.val = 1 . Review: Lists and Iteration . Lists and iteration work hand-in-hand to efficiently process and/or modify multiple values at once. In a card game, for example, lists and iteration are used together frequently to make the game work correctly. . For Loops . For loops are probably the most well-known type of iterative loop used in code. Most of us know about the for variable in list format. . One helpful tool not a lot of people know about is the enumerate() function. When used in conjunction with a for loop, you can always have _ and value of each selected list entry. . numlist = [3, 5, 68, 203] for key, num in enumerate(numlist): print(f&quot;This entry&#39;s index is {str(key)}, but its value is {str(num)}.&quot;) print(f&quot;The difference between the value and the index is {num - key}.&quot;) . QUESTION: How is the key, num in enumerate(list) format similar to the format used when applying a for loop to a dictionary? . Answer: __ . List Comprehension . You may also see for loops used within a list like below. We went over this in class fairly recently. In this case, it is used to show the cards in the hand of a player. . player_hand = [] # the player&#39;s hand is represented as a list # because lists are mutable (can change), they can be added to, like drawing a card # assume the deck below is a a deck of shuffled cards deck = [Card(&quot;Hearts&quot;, 3), Card(&quot;Spades&quot;, 12), Card(&quot;Diamonds&quot;, 11)] def draw_card(hand, deck): hand.append(deck.pop()) #try it out draw_card(player_hand, deck) print([card.show() for card in player_hand]) . Recursive Loops . Recursive loops have you calling one function inside of another. If a function must make some change to a certain value multiple times, it is oftem most efficient to have a function call itself with slightly different arguments like the fibonacci sequence below. . def fibonacci(terms): if terms &lt;= 1: return terms return fibonacci(terms-1) + fibonacci(terms-2) fibonacci(5) . Nesting Loops . Nesting loops increases the time complexity of the program, but it can be used to do things like make a card deck (see below). . def build(deck): for suit in [&quot;Spades&quot;, &quot;Clubs&quot;, &quot;Diamonds&quot;, &quot;Hearts&quot;]: for val in range(2, 15): #HINT: try replacing this function deck.append(Card(suit, val)) . While Loops . While loops aren&#39;t used in the program, but they offer a __ a set of instructions in a program. The procedure below the while [condition] line will occur until the condition is made not true. . Student Interaction: How could this build function be altered to function with a while loop within it? . def build(deck): for suit in [&quot;Spades&quot;, &quot;Clubs&quot;, &quot;Diamonds&quot;, &quot;Hearts&quot;]: for val in range(2, 15): deck.append(Card(suit, val)) #HINT: you may want to make an incrementing i variable . While loops also alter an alternative way to loop a set of instructions forever, until a precise thing occurs to break the loop. See the code below. . import random i = 0 while True: i += 1 ch = random.randint(1, 11) if ch == 10: print(f&quot;It took {str(i)} random generations to get 10.&quot;) break . 49 random generations is a lot more than it would normally take, but it&#39;s important for code to be able to model unlikely, yet possible scenarios. Speaking of random values... . Random Values . Because unpredictable randomness occurs in the real world, it&#39;s important to have a way to represent it. Simulations are _, which could be in the form of random number generation or other methods like shuffle. . Card decks are a great example of how random values can be used to represent real-world scenarios. In the card simulation, the random module&#39;s shuffle function is used to quite literally shuffle the deck, seen below. . def shuffle(deck): random.shuffle(deck) . Often, random selection methods use functions like ______ or ________ as ways to select certain indexes in lists, or might use the random numbers in some other way. . QUESTION: Without shuffling the card order of the deck, can you think of a way that the aforementioned random module functions could be used to get a random card from the deck? Do so in the code cell below. . import random #find another random function that could pull a random card from a deck of UNSORTED cards . Simulation Homework . Now that you&#39;ve learned about simulations and how they&#39;re used, it&#39;s time to apply that knowledge by creating a (basic) simulation of a real-world scenario. It can be something in nature, like the changes in the wildlife population of a certain area; it can be a game, like Uno (no blackjack though, that&#39;s taken); or it can be something completely random and unique. . The simulation must include... . Use of at least one random value | At least one list or similar data type (dictionary, set, etc.) | Efficient use of iteration (must support the purpose of the simualtion) | Selection (use of conditionals) | . Do this in your student copy in the cell provided. This is worth 0.9 (or more with extra credit) out of the 3 possible points. . # (Concert attendance? Wind speeds? Interactions between subjects in large environments?) # Think about the sort of things that could be saved in lists, dictionaries, etc. # (Even better if you can take advantage of the specific features of multiple types of data sets!) # What kind of iteration happens in the real world? # What occurs repeatedly, even over a long period of time? # You could model the results of a disease spreading through a population without it taking IRL years. . Databases . We have already gone over databases in this class, but here is a refresher. A database contains data that&#39;s __. The information in this database can then be __ from the database and can be used in a program. . Setting Up the Database . Run the code cell below to prepare SQLite to create the database. If your system is struggling with the flask functions, verify that you&#39;re in the correct Python environment. REMEMBER: You should only db.init_app(app) ONCE during the process! . from flask import Flask from flask_sqlalchemy import SQLAlchemy # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . The Model File . The model file plays a crucial role in the formation of the database. . The model helps to create new databases | It provides a standardized method for formating the database entries across different systems | Objects used within the database are created | . import os, base64 import json from sqlalchemy.exc import IntegrityError # Define the User class to manage actions in the &#39;users&#39; table class User(db.Model): __tablename__ = &#39;players&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _username = db.Column(db.String(255), unique=False, nullable=False) _streak = db.Column(db.Integer, unique=True, nullable=False) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, username, streak): self._username = username self._streak = streak # a username getter method, extracts username from object @property def username(self): return self._username # a setter function, allows username to be updated after initial object creation @username.setter def username(self, username): self._username = username # a getter method, extracts streak from object @property def streak(self): return self._streak # a setter function, allows streak to be updated after initial object creation @streak.setter def streak(self, streak): self._streak = streak # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;username&quot;: self.username, &quot;streak&quot;: self.streak } # CRUD update: updates user name, password, phone # returns self def update(self, username, streak): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(username) &gt; 0: self.username = username if streak &gt; 0: self.streak = streak db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(username=&quot;Mr. Cards&quot;, streak=5) u2 = User(username=&quot;Kard Kowntre&quot;, streak=10) u3 = User(username=&quot;Un Bea Table&quot;, streak=15) users = [u1, u2, u3] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: user.create() print(f&#39;Created user with username &quot;{user.username}&quot;.&#39;) except IntegrityError: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; db.session.remove() print(f&quot;Records exist, duplicate email, or error: {user.username}&quot;) . The init Fuction . The init method has one purpose which is to initialize the object&#39;s attributes. This is what is known as the constructor. In our project, the init method initalizes the username and streak as variables. . def __init__(self, username, streak): self._username = username self._score = streak . Setters and Getters . Setters and Getters are important methods used when writing code for databases. . Setter: a method that allows us to ___ the value of an attribute in a class. | Getter: a method that allows us to __ an attribute in a given class. | . Setter Example . @streak.setter def streak(self, streak): self._streak = streak . Getter Example . @property def streak(self): return self._streak . The Api File . An API is an important part of having a functional database. . it acts as a messenger that allows programs to access data from the others | it connects all information | for a database, an api _ the data requested in code for the user | . import json from flask import Blueprint, request, jsonify from flask_restful import Api, Resource # used for REST API building user_api = Blueprint(&#39;user_api&#39;, __name__, url_prefix=&#39;/api/users&#39;) api = Api(user_api) class UserAPI: class _CRUD(Resource): # User API operation for Create, Read. THe Update, Delete methods need to be implemeented def post(self): # Create method &#39;&#39;&#39; Read data for json body &#39;&#39;&#39; body = request.get_json() &#39;&#39;&#39; Avoid garbage in, error checking &#39;&#39;&#39; # validate name username = body.get(&#39;username&#39;) if username is None or len(username) &lt; 1: return {&#39;message&#39;: f&#39;Username is missing, or is less than a character&#39;}, 400 # validate uid streak = body.get(&#39;streak&#39;) if streak is None or streak &lt; 1: return {&#39;message&#39;: f&#39;Streak is missing, or is less than 1&#39;}, 400 &#39;&#39;&#39; #1: Key code block, setup USER OBJECT &#39;&#39;&#39; uo = User(username=username, streak=streak) &#39;&#39;&#39; #2: Key Code block to add user to database &#39;&#39;&#39; # create user in database user = uo.create() # success returns json of user if user: return jsonify(user.read()) # failure returns error return {&#39;message&#39;: f&#39;Processed {username}, either a format error or a duplicate&#39;}, 400 def get(self): # Read Method users = User.query.all() # read/extract all users from database json_ready = [user.read() for user in users] # prepare output in json return jsonify(json_ready) # jsonify creates Flask response object, more specific to APIs than json.dumps def put(self): body = request.get_json() # get the body of the request id = body.get(&#39;id&#39;) username = body.get(&#39;username&#39;) streak = body.get(&#39;streak&#39;) # get the UID (Know what to reference) user = User.query.get(id) # get the player (using the uid in this case) user.update(username=username, streak=streak) return f&quot;{user.read()} Updated&quot; def delete(self): body = request.get_json() id = body.get(&#39;id&#39;) player = User.query.get(id) player.delete() return f&quot;{player.read()} Has been deleted&quot; # building RESTapi endpoint api.add_resource(_CRUD, &#39;/&#39;) . This is important particularly in a full flask respository context, but in this case, you&#39;ll just need to run the initUsers() function. . initUsers() . An Alternative Method of Making SQLite Databases . In a previous lesson, we went over using the cursor object in SQLite3. Rather than go over all of that here, this lesson goes over it thoroughly. (You may use this method for the homework below.) . Database Homework . For this assignment, we&#39;d like you to make your own database file as instructed above. Remember, the API file isn&#39;t necessary in this case; you&#39;ll be focusing on making the model and the init function. . Your database must include these things: . A class with at least four attributes (if not the cursor method) | Setters and getters for this class (if not the cursor method) | Each of the CRUD functions | An init function with at least four entries | A screenshot showing proof that your SQLite file has been created correctly | . Feel free to base your database on the model provided above! Ask our group if you have any questions or concerns. . # If you&#39;ve already run the db.init_app(app) function while in this notebook, # don&#39;t do it again until you&#39;ve closed it! from flask import Flask from flask_sqlalchemy import SQLAlchemy app = Flask(__name__) database = &#39;sqlite:///sqlite.db&#39; app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() db.init_app(app) . import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash class Shipment_B(db.Model): __tablename__ = &#39;Shipment_business&#39; id = db.Column(db.Integer, primary_key=True) _Shipment = db.Column(db.String(255), unique=True, nullable=False) _Quantity = db.Column(db.String(255), unique=False, nullable=False) _Date = db.Column(db.String(255), unique=False, nullable=False) _Cost = db.Column(db.String(255), unique=False, nullable=False) _Location = db.Column(db.String(255), unique=False, nullable=False) _Status = db.Column(db.String, unique=False) def __init__(self, Shipment, Quantity, Date, Cost, Location, Status): self._Shipment = Shipment self._Quantity = Quantity self._Date = Date self._Cost = Cost self._Location = Location self._Status = Status @property def Shipment(self): return self._Shipment @Shipment.setter def Shipment(self, Shipment): self._Shipment = Shipment @property def Quantity(self): return self._Quantity @Quantity.setter def Quantity(self, Quantity): self._Quantity = Quantity @property def Date(self): return self._Date @Date.setter def Date(self, Date): self._Date = Date @property def Cost(self): return self._Cost @Cost.setter def Cost(self, Cost): self._Cost = Cost @property def Location(self): return self._Location @Location.setter def Location(self, Location): self._Location = Location @property def Status(self): return self._Status @Status.setter def Status(self, Status): self._Status = Status def __str__(self): return json.dumps(self.read()) def create(self): try: db.session.add(self) db.session.commit() return self except IntegrityError: db.session.remove() return None def read(self): return { &quot;id&quot;: self.id, &quot;Shipment&quot; : self.Shipment, &quot;Quantity&quot; : self.Quantity, &quot;Date&quot; : self.Date, &quot;Cost&quot; : self.Cost, &quot;Location&quot;: self.Location, &quot;Status&quot;: self.Status } def update(self, Shipment, Quantity, Date, Cost, Location, Status): if len(Shipment) &gt; 0: self.Shipment = Shipment if len(Quantity) &gt; 0: self.Quantity = Quantity if len(Date) &gt; 0: self.Date = Date if len(Cost) &gt; 0: self.Cost = Cost if len(Location) &gt; 0: self.Location = Location if len(Status) &gt; 0: self.Status = Status db.session.add(self) db.session.commit() return self def delete(self): db.session.delete(self) db.session.commit() return None . def initShipment_business(): with app.app_context(): db.create_all() S1 = Shipment_B(Shipment=&#39;Microsoft Microchips&#39;, Quantity=&#39;500,000&#39;, Date=&#39;12/01/2021&#39;, Cost=&#39;$100,000&#39;, Location=&#39;Microsoft Headquarters&#39;, Status=&#39;Shipping&#39;) S2 = Shipment_B(Shipment=&#39;Orlando Fish Farm Salmon&#39;, Quantity=&#39;500&#39;, Date=&#39;09/03/2022&#39;, Cost=&#39;$20,000&#39;, Location=&#39;Orlando Pharmaceuticals&#39;, Status=&#39;Ordered&#39;) S3 = Shipment_B(Shipment=&#39;PVC Pipes&#39;, Quantity=&#39;2,000&#39;, Date=&#39;05/22/2023&#39;, Cost=&#39;$500&#39;, Location=&#39;ID Tech&#39;, Status=&#39;Recieved&#39;) S4 = Shipment_B(Shipment=&#39;Lipo Batteries 360 kWatts&#39;, Quantity=&#39;150&#39;, Date=&#39;10/05/2022&#39;, Cost=&#39;$225&#39;, Location=&#39;Riverhouse, Illinois&#39;, Status=&#39;Shipping&#39;) S5 = Shipment_B(Shipment=&#39;Plywood 4x16 in&#39;, Quantity=&#39;3,000&#39;, Date=&#39;05/03/2023&#39;, Cost=&#39;n/a&#39;, Location=&#39;Lowes Furniture&#39;, Status=&#39;n/a&#39;) S6 = Shipment_B(Shipment=&#39;CAS Texas Instrument&#39;, Quantity=&#39;400&#39;, Date=&#39;12/05/2021&#39;, Cost=&#39;$20,000&#39;, Location=&#39;Del Norte High School mathematics&#39;, Status=&#39;Recieved&#39;) S7 = Shipment_B(Shipment=&#39;Jabra Extendable Headphones&#39;, Quantity=&#39;2,500&#39;, Date=&#39;01/01/2021&#39;, Cost=&#39;$7,687.21&#39;, Location=&#39;Qualcomm Headquarters&#39;, Status=&#39;recieved&#39;) S8 = Shipment_B(Shipment=&#39;Apple Wireless AirPods&#39;, Quantity=&#39;1,500&#39;, Date=&#39;05/05/2025&#39;, Cost=&#39;$18,076.20&#39;, Location=&#39;LS Technology&#39;, Status=&#39;Ordered&#39;) S9 = Shipment_B(Shipment=&#39;Jordan 4s, custom fade&#39;, Quantity=&#39;4&#39;, Date=&#39;08/30/2005&#39;, Cost=&#39;$1,221&#39;, Location=&#39;Drip Nation Headquarters&#39;, Status=&#39;recieved&#39;) S10 = Shipment_B(Shipment=&#39;Tofi Powder&#39;, Quantity=&#39;250 mg&#39;, Date=&#39;09/09/2023&#39;, Cost=&#39;$200&#39;, Location=&#39;Tyler1 Fuelers&#39;, Status=&#39;recieved&#39;) S11 = Shipment_B(Shipment=&#39;No. 2 Pencil&#39;, Quantity=&#39;23,000&#39;, Date=&#39;05/25/2023&#39;, Cost=&#39;$1,500&#39;, Location=&#39;Del Norte High School&#39;, Status=&#39;ordered&#39;) S12 = Shipment_B(Shipment=&#39;Adidas Techs &amp; Fleeces&#39;, Quantity=&#39;122&#39;, Date=&#39;06/26/2022&#39;, Cost=&#39;€15,000&#39;, Location=&#39;Jabari Smith Florence&#39;, Status=&#39;shipping&#39;) S13 = Shipment_B(Shipment=&#39;Forgiato Rims&#39;, Quantity=&#39;82&#39;, Date=&#39;11/12/2023&#39;, Cost=&#39;$2,540&#39;, Location=&#39;Box Headquarters&#39;, Status=&#39;shipping&#39; ) S14 = Shipment_B(Shipment=&#39;Insignia Mouse Pads&#39;, Quantity=&#39;19&#39;, Date=&#39;04/06/2023&#39;, Cost=&#39;$1,100.54&#39;, Location=&#39;Texas Institute of Technology&#39;, Status=&#39;shipping&#39;) S15 = Shipment_B(Shipment=&#39;Whole Market Produce&#39;, Quantity=&#39;1,450&#39;, Date=&#39;08/21/2021&#39;, Cost=&#39;$2,863.22&#39;, Location=&#39;Sprouts assorted locations&#39;, Status=&#39;recieved&#39;) Ship = [S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15] for S in Ship: try: object = S.create() print(f&quot;Added data for {object.Shipment}&quot;) except IntegrityError: print(f&quot;Records exist, duplicate shipments, or error: {S.Shipment}&quot;) initShipment_business() . def find_by_Shipment(Shipment): with app.app_context(): shipment_B = Shipment_B.query.filter_by(_Shipment=Shipment).first() return shipment_B . def create(): Shipment = input(&quot;Name for Shipment:&quot;) Content = find_by_Shipment(Shipment) try: print(&quot;Found n&quot;, Content.read()) return except: pass Quantity = input(&quot;Enter the total # of products within shipment:&quot;) Date = input(&quot;Enter Date of Shipment:&quot;) Cost = input(&quot;Enter Shipment Costs:&quot;) Location = input(&quot;Enter Shipment Location:&quot;) Status = input(&quot;Enter Shipment Staus (oredred/shipping/recieved):&quot;) shipment_B = Shipment_B(Shipment=Shipment, Quantity=Quantity, Date=Date, Cost=Cost, Location=Location, Status=Status ) with app.app_context(): try: object = shipment_B.create() print(&quot;Created n&quot;, object.read()) except: print(&quot;Unknown error uid {Shipment}&quot;) create() . Created {&#39;id&#39;: 31, &#39;Shipment&#39;: &#39;New Shipment&#39;, &#39;Quantity&#39;: &#39;120&#39;, &#39;Date&#39;: &#39;04/05/2021&#39;, &#39;Cost&#39;: &#39;$20&#39;, &#39;Location&#39;: &#39;West Virginia&#39;, &#39;Status&#39;: &#39;Shipping&#39;} . def read(): with app.app_context(): table = Shipment_B.query.all() json_ready = [shipment_B.read() for shipment_B in table] return json_ready read() . [{&#39;id&#39;: 16, &#39;Shipment&#39;: &#39;Microsoft Microchips&#39;, &#39;Quantity&#39;: &#39;500,000&#39;, &#39;Date&#39;: &#39;12/05/2021&#39;, &#39;Cost&#39;: &#39;$150,000&#39;, &#39;Location&#39;: &#39;Microsoft Headquarters&#39;, &#39;Status&#39;: &#39;Recieved&#39;}, {&#39;id&#39;: 17, &#39;Shipment&#39;: &#39;Orlando Fish Farm Salmon&#39;, &#39;Quantity&#39;: &#39;1000&#39;, &#39;Date&#39;: &#39;09/03/2021&#39;, &#39;Cost&#39;: &#39;$28,750&#39;, &#39;Location&#39;: &#39;Orlando pharmaceuticals&#39;, &#39;Status&#39;: &#39;Shipping&#39;}, {&#39;id&#39;: 18, &#39;Shipment&#39;: &#39;PVC Pipes&#39;, &#39;Quantity&#39;: &#39;2,000&#39;, &#39;Date&#39;: &#39;05/22/2023&#39;, &#39;Cost&#39;: &#39;$500&#39;, &#39;Location&#39;: &#39;ID Tech&#39;, &#39;Status&#39;: &#39;Recieved&#39;}, {&#39;id&#39;: 19, &#39;Shipment&#39;: &#39;Lipo Batteries 360 kWatts&#39;, &#39;Quantity&#39;: &#39;150&#39;, &#39;Date&#39;: &#39;10/05/2022&#39;, &#39;Cost&#39;: &#39;$225&#39;, &#39;Location&#39;: &#39;Riverhouse, Illinois&#39;, &#39;Status&#39;: &#39;Shipping&#39;}, {&#39;id&#39;: 20, &#39;Shipment&#39;: &#39;Plywood 4x16 in&#39;, &#39;Quantity&#39;: &#39;3,000&#39;, &#39;Date&#39;: &#39;05/03/2023&#39;, &#39;Cost&#39;: &#39;n/a&#39;, &#39;Location&#39;: &#39;Lowes Furniture&#39;, &#39;Status&#39;: &#39;n/a&#39;}, {&#39;id&#39;: 21, &#39;Shipment&#39;: &#39;CAS Texas Instrument&#39;, &#39;Quantity&#39;: &#39;400&#39;, &#39;Date&#39;: &#39;12/05/2021&#39;, &#39;Cost&#39;: &#39;$20,000&#39;, &#39;Location&#39;: &#39;Del Norte High School mathematics&#39;, &#39;Status&#39;: &#39;Recieved&#39;}, {&#39;id&#39;: 22, &#39;Shipment&#39;: &#39;Jabra Extendable Headphones&#39;, &#39;Quantity&#39;: &#39;2,500&#39;, &#39;Date&#39;: &#39;01/01/2021&#39;, &#39;Cost&#39;: &#39;$7,687.21&#39;, &#39;Location&#39;: &#39;Qualcomm Headquarters&#39;, &#39;Status&#39;: &#39;recieved&#39;}, {&#39;id&#39;: 23, &#39;Shipment&#39;: &#39;Apple Wireless AirPods&#39;, &#39;Quantity&#39;: &#39;1,500&#39;, &#39;Date&#39;: &#39;05/05/2025&#39;, &#39;Cost&#39;: &#39;$18,076.20&#39;, &#39;Location&#39;: &#39;LS Technology&#39;, &#39;Status&#39;: &#39;Ordered&#39;}, {&#39;id&#39;: 24, &#39;Shipment&#39;: &#39;Jordan 4s, custom fade&#39;, &#39;Quantity&#39;: &#39;4&#39;, &#39;Date&#39;: &#39;08/30/2005&#39;, &#39;Cost&#39;: &#39;$1,221&#39;, &#39;Location&#39;: &#39;Drip Nation Headquarters&#39;, &#39;Status&#39;: &#39;recieved&#39;}, {&#39;id&#39;: 25, &#39;Shipment&#39;: &#39;Tofi Powder&#39;, &#39;Quantity&#39;: &#39;250 mg&#39;, &#39;Date&#39;: &#39;09/09/2023&#39;, &#39;Cost&#39;: &#39;$200&#39;, &#39;Location&#39;: &#39;Tyler1 Fuelers&#39;, &#39;Status&#39;: &#39;recieved&#39;}, {&#39;id&#39;: 26, &#39;Shipment&#39;: &#39;No. 2 Pencil&#39;, &#39;Quantity&#39;: &#39;23,000&#39;, &#39;Date&#39;: &#39;05/25/2023&#39;, &#39;Cost&#39;: &#39;$1,500&#39;, &#39;Location&#39;: &#39;Del Norte High School&#39;, &#39;Status&#39;: &#39;ordered&#39;}, {&#39;id&#39;: 27, &#39;Shipment&#39;: &#39;Adidas Techs &amp; Fleeces&#39;, &#39;Quantity&#39;: &#39;122&#39;, &#39;Date&#39;: &#39;06/26/2022&#39;, &#39;Cost&#39;: &#39;€15,000&#39;, &#39;Location&#39;: &#39;Jabari Smith Florence&#39;, &#39;Status&#39;: &#39;shipping&#39;}, {&#39;id&#39;: 28, &#39;Shipment&#39;: &#39;Forgiato Rims&#39;, &#39;Quantity&#39;: &#39;82&#39;, &#39;Date&#39;: &#39;11/12/2023&#39;, &#39;Cost&#39;: &#39;$2,540&#39;, &#39;Location&#39;: &#39;Box Headquarters&#39;, &#39;Status&#39;: &#39;shipping&#39;}, {&#39;id&#39;: 29, &#39;Shipment&#39;: &#39;Insignia Mouse Pads&#39;, &#39;Quantity&#39;: &#39;19&#39;, &#39;Date&#39;: &#39;04/06/2023&#39;, &#39;Cost&#39;: &#39;$1,100.54&#39;, &#39;Location&#39;: &#39;Texas Institute of Technology&#39;, &#39;Status&#39;: &#39;shipping&#39;}, {&#39;id&#39;: 30, &#39;Shipment&#39;: &#39;Whole Market Produce&#39;, &#39;Quantity&#39;: &#39;1,450&#39;, &#39;Date&#39;: &#39;08/21/2021&#39;, &#39;Cost&#39;: &#39;$2,863.22&#39;, &#39;Location&#39;: &#39;Sprouts assorted locations&#39;, &#39;Status&#39;: &#39;recieved&#39;}, {&#39;id&#39;: 31, &#39;Shipment&#39;: &#39;New Shipment&#39;, &#39;Quantity&#39;: &#39;120&#39;, &#39;Date&#39;: &#39;04/05/2021&#39;, &#39;Cost&#39;: &#39;$20&#39;, &#39;Location&#39;: &#39;West Virginia&#39;, &#39;Status&#39;: &#39;Shipping&#39;}] . def updateq(): Shipment = input(&quot;Enter the name of the Shipment to update: &quot;) Content = find_by_Shipment(Shipment) Quantity = input(&quot;Enter the shipment&#39;s new quantity : &quot;) Date = input(&quot;Enter the updated date : &quot;) Cost = input(&quot;Enter the new cost: &quot;) Location = input(&quot;Enter the new location: &quot;) Status = input(&quot;Enter the new status: &quot;) if Content is not None: with app.app_context(): Content.update(Shipment=Shipment, Quantity=Quantity, Date=Date, Cost=Cost, Location=Location, Status=Status) print(&quot;Updated Shipment:&quot;, Shipment) else: print(&quot;error&quot;) updateq() . Updated Shipment New Shipment . def delete(): Shipment = input(&quot;Enter the Name of the Shipment you would like to Delete:&quot;) Content = find_by_Shipment(Shipment) try: pass except: Shipment = input(&quot;Try again, that was not a valid Shipment:&quot;) with app.app_context(): try: object = Content.delete() print(&quot;Deleted n&quot;, Content) except: print(&quot;Unknown error uid {Shipment}&quot;) delete() . Deleted {&#34;id&#34;: 31, &#34;Shipment&#34;: &#34;New Shipment&#34;, &#34;Quantity&#34;: &#34;1&#34;, &#34;Date&#34;: &#34;1&#34;, &#34;Cost&#34;: &#34;1&#34;, &#34;Location&#34;: &#34;1&#34;, &#34;Status&#34;: &#34;1&#34;} . Grading . Your submission will be graded based on the following criteria: . Filling in the blank throughout the lesson and providing code in the given cells when applicable (0.9) | Simulation homework (0.9) | Database homework (0.9) | . Here are some ideas for ways to increase your score above a 2.7: . Make a frontend version of your simulation that can be interacted with on your blog | Connect your simulation to the database you create | Create a menu that allows a user to make an entry in your database (CRUD functions within it) | You can establish a relationship between two classes/tables in your database (see the relationship between the User and Note classes in the Nighthawk Coders flask repository) | .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/bigidea3simsqlite/",
            "relUrl": "/bigidea3simsqlite/",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "SASS",
            "content": "Why SASS? . SASS is an improvement on CSS in that there are methods of abstraction. It is a coding language that is integrated into CSS, which means that programming, which is what your web browser can read. . SASS vs SCSS . As you learn about Sass, you might notice something called Scss. They are basically the same thing except that Scss uses curly braces and semicolons to distinguish between lines. Sass uses indentation and newlines instead. . We will be teaching the Scss syntax because it is more commonly used. . Getting started . A easy way to write SASS and have it preprocessed into CSS is by using a Jekyll powered website, such as GitHub pages or Fastpages. . The first step is to clone a GitHub pages repo, such as this one. . Within the repository, head over to assets/css/, and open style.scss. . This is where you can create your SASS code. . To see your CSS-translated SASS code, head over to _site/assets/css/style.css . Note: You will need to run bundle exec jekyll serve before the _site directory appears. . The first few hundred lines are used to style Github&#39;s theme. Make sure to scroll to the very bottom to see the SASS code that you wrote, which is in the form of CSS. . Nesting . While writing CSS, you may notice that many selectors share the same element. . For example, let&#39;s say you have a div element that controls the font. Inside the div element, you have two other divs that control the font size. . SASS provides a feature called nesting in which you can write styling code in a way that looks like an HTML hierarchy. . Mini-hack . Write out the SASS equivalent for the following CSS code: . .a .b { color: green; } .a .c { color: blue; } . SASS Equivalent: . .a { .b{ color: green; } .c{ color: blue; } } . Extend/Inheritance . What are some similarities that the buttons share? What are the differences? . What if you wanted to reuse a portion of your CSS code in multiple selectors? In CSS, you would need to copy and paste the code each time, while in SASS, you can use @extend to inherit the code. . If we were to write it out in CSS, we would need to specify these properties for each button selector. . With SASS, we can create a placeholder class that stores the code we want to reuse. A placeholder class looks like this: . For example, to specify the width, height, font color, and spacing for each button, we can create a placeholder class called %buttonLayout and write our styling in there. . %buttonLayout is like a template for the specific buttons that we want to make. . A selector needs to be created for each button. Code from the placeholder class can be called with @extend %class-name . Mini-hack . Write out a mixin in SASS that takes in a color and a font size as the parameter. Within the mixin, set the background color and font color to the color parameter, and set the font size to the font size parameter. Then create a selector that calls the mixin, and pass in a color and font size of your choice as the arguments. . SASS Code: . @mixin testCode($testColor, $fontSize) { background: $testColor; color: $testColor; font-size: $fontSize; } .testCodeSelector { @include testCode(#00ffc1, 10px); } . Function . To change between light and dark mode, we can create an invert function in SASS. | A function can be created that takes in an rgb value and returns the inverted rgb color. . To invert colors, subtract each rgb value from 255. | . | Functions are called by specifying the function name with parenthesis. Inside the parenthesis, you can specify the arguments. | . Import . After configuring a lot of styling, your SASS file might get cluttered. . There is a way to split your code into multiple files and import them into one file. | . For instance, to put the styling for function.html in another SASS file, first create a directory called _sass. . Within the directory, create another SASS file. In this case, the file is called functionStyle.scss . Write your SASS code in that file. Once you are finished, switch back to style.scss and import the file with @import &quot;file-name&quot; . For instance, to import the functionStyle.scss file into style.scss , the import statement would be @import &quot;functionStyle&quot;. . SASS Hacks . Take notes and complete the mini-hacks. (0.9) . | Complete the quiz questions and provide your answers in this notebook. (0.9) . | Use SASS to create something that uses either extend or mixin. (0.9) . | Extra credit: Research other SASS features and blog about what you learned or add to your SASS project with any extra features not covered in this lesson. More points will be given if both are done. . | SASS Quiz . B | A | C | A | D | B | B | Researched SASS features . Variables: . Enables users to define values | Can be used to define colors, font sizes, margins, padding values, and more. | . Control Directives: . Some examples are @if, @for, and @each | These enable us to write conditional statements and loops, and also allow iteration | . Partials: . Partial SASS files that contain small code segments | Can be included in other files | Is an easy way to organize code | Name with an underscore like _partial.scss | . Modules: . Can be used to split SASS code in a single file @use | Loads another SASS file as a module | Its variables, mixins, and functions can be accessed | . SASS Program . (link)[https://jonathanwuz.github.io/LeuckACheuck/] . Sass code used on submit button | . SASS Code: . &lt;style&gt; @mixin button-styles { font-size: 1.2em; padding: 30px 50px; color: #fff; text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.4); border: none; border-radius: 30px; cursor: pointer; background: linear-gradient(to right, #00c6ff, #0072ff); transition: all 0.2s ease-in-out; } .button { @include button-styles; width: 25%; height: 150px; margin: auto; border-radius: 30px; background: linear-gradient(to right, #fc4a1a, #f7b733); } &lt;/style&gt; .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/2023/04/24/sass-lesson.html",
            "relUrl": "/2023/04/24/sass-lesson.html",
            "date": " • Apr 24, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Basic JavaScript Knowledge",
            "content": "Variables . - declare JavaScript variables with var, let or const. - If the value of the variable can change, like a total, use let. If the value is set, like prices, use const. Variables can hold any data type. . var x = 5; var y = 6; var z = x + y; z . 11 . Data types- there are 8 JS data types. . List a few data types that you already knowinteger string boolean . | . 1. String: a series of characters, written with single or double quotes . let text = &quot;Mort&quot;; text . &#39;Mort&#39; . let text2 = &#39;Yeung&#39;; text2 . &#39;Yeung&#39; . 2. Number: can be integers or decimals. . - You can also have exponential notation for large/small numbers . 3. Bigint: used to store integer values that are too big to be represented by a normal JS number . - JavaScript integers are only accurate up to 15 digits . let number = 1234567890123456789012345n; let Largenum = BigInt(1234567890123456789012345) let typeLargenum = typeof Largenum; typeLargenum . &#39;bigint&#39; . Largenum . 1234567890123456824475648n . 4. Boolean: true or false, used in conditional testing . Boolean(10 &gt; 9) . false . Write a boolean statement that outputs true . 5. Undefined: a variable without a value, has the value undefined/empty values . let name; name . grade = undefined; . 6. Null: represents the intentional absence of any object value . - variable is empty at the moment and may have a value later . let result; result = Boolean(undefined); console.log(result); // false result = Boolean(null); console.log(result); // false . false false . 7. Symbol: used to represent unique values that can be used as identifiers/keys in objects. . - They are also used to create private properties and methods in classes. - unique and immutable, so they can be used as unique identifiers in objects and classes. - useful for creating constants that can be shared across different parts of your code. . // Create a Symbol const mySymbol = Symbol(); console.log(mySymbol); // expected output: Symbol() . Symbol() . const myObject = { [mySymbol]: &#39;Hello World&#39; }; console.log(myObject[mySymbol]); . Hello World . Edit/add to the code above so that it outputs &quot;Hello World&quot; . 8. Object: an unordered collection of key-value pairs. Each key-value pair is called a property. . - object: written with curly braces {}, name:value pairs - array: written with square brackets, separated by commas . Object . Identify the name/keys in the object below: name, breed, color, age | Identify the values in the object below: Elly, Rottweiler, black, 4 | . const dogs = {name: &quot;Elly&quot;, breed:&quot;Rottweiler&quot;, age:4, color:&quot;black&quot;} dogs . { name: &#39;Elly&#39;, breed: &#39;Rottweiler&#39;, age: 4, color: &#39;black&#39; } . Array . const songs = [&quot;Love Story&quot;, &quot;Blank Space&quot;, &quot;I Knew You Were Trouble&quot;]; songs . [ &#39;Love Story&#39;, &#39;Blank Space&#39;, &#39;I Knew You Were Trouble&#39; ] . Const . - We use const to declare variables whose value can be initialized only at the time of declaration. - Const means that the identifier cannot be reassigned. . const cost1 = 2; const cost2 = 11; let totalCost = cost1 + cost2; totalCost . 13 . Conditionals: control behavior, decides whether or not pieces of code can run. . - If: if a condition is true it is used to specify execution for a block of code. - Else: if the same condition is false it specifies the execution for a block of code. - Else If: new test if the first condition is false. . if (10 &gt; 5) { var outcome = &quot;True&quot;; } outcome; . &#39;True&#39; . if (&quot;red&quot; === &quot;blue&quot;) { var outcome = &quot;if block&quot;; } else { var outcome = &quot;else block&quot;; } outcome; . &#39;else block&#39; . let temperature = 54 if (temperature &lt; 70) { cast = &quot;Chilly&quot;; } else if (temperature &lt; 60) { cast = &quot;Cold&quot;; } else { cast = &quot;Warm&quot;; } cast . &#39;Chilly&#39; . Create a conditional statement about how you would greet someone based on the time of day. . let currentTime = 5 if (currentTime &lt; 70) { greeting = &quot;Good morning!&quot;; } else if (temperature &lt; 60) { greeting = &quot;Good afternoon!&quot;; } else { greeting = &quot;Good evening!&quot;; } greeting . &#39;Good morning!&#39; . Functions: . - defining: define with function + functionName(parameter) { function code }. It can be unnamed/anonymous can be defined based on a condition. - calling: simply put the function name with a parameter and semicolon, or a function can call itself (recursive) . Iteration: . - for loop: repeats until a specified condition evaluates to false - do...while: repeats until a specified condition evaluates to false - while statement: executes its statements as long as a specified condition evaluates to true - label: provides a statement with an identifier that lets you refer to it later in the code. ex. you can use a label to identify a loop, and then use the break or continue statements to indicate whether a program should interrupt the loop or continue its execution - break: used to terminate a loop, switch, or in conjunction with a labeled statement - continue: can be used to restart a while, do-while, for, or label statement - for...in: iterates a specified variable over all the enumerable properties of an object - for...of statement creates a loop Iterating over iterable objects, invoking a custom iteration hook with statements to be executed for the value of each distinct property . JavaScript in HTML- Questions . Where do you store the JavaScript Code? | I store Javascript code in .js file | . How do you import a JS file into HTML? | &lt; script src=&quot;name.js&quot;&gt;&lt;/ script&gt; | . What is onClick? | onClick describes a function in which a click happens, some action occurs | . What tag do you use to write JavaScript code? | use &lt; script &gt; tag | . Hacks . Add notes in this notebook | Complete the code portions, questions, and prompts throughout the notebook | Extra Credit: code a small JavaScript game | Javascript Hangman Game . (Link)[https://jonathanwuz.github.io/LeuckACheuck/] . This is a hangman Javascript game code through html and javascript. The Submit button is colorful and is apart of the SASS hacks. | . JS Code: . &lt;script&gt; // Initialize variables var words = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;date&quot;, &quot;elderberry&quot;, &quot;fig&quot;, &quot;grape&quot;, &quot;honeydew&quot;, &quot;indian gooseberry&quot;, &quot;jackfruit&quot;, &quot;kiwi&quot;, &quot;lemon&quot;, &quot;mango&quot;, &quot;nectarine&quot;, &quot;orange&quot;, &quot;peach&quot;, &quot;quince&quot;, &quot;raspberry&quot;, &quot;strawberry&quot;, &quot;tangerine&quot;, &quot;ugli fruit&quot;, &quot;vanilla&quot;, &quot;watermelon&quot;, &quot;xylocarp&quot;, &quot;yellow watermelon&quot;, &quot;zucchini&quot;]; var wordToGuess = words[Math.floor(Math.random() * words.length)]; var incorrectGuesses = []; var gameStatus = &quot;&quot;; var guessInput = document.getElementById(&quot;guess-input&quot;); var wordToGuessDisplay = document.getElementById(&quot;word-to-guess&quot;); var incorrectGuessesDisplay = document.getElementById(&quot;incorrect-guesses&quot;); var gameStatusDisplay = document.getElementById(&quot;game-status&quot;); // Initialize the word to guess display var wordToGuessArray = []; for (var i = 0; i &lt; wordToGuess.length; i++) { wordToGuessArray.push(&quot;_&quot;); } wordToGuessDisplay.innerHTML = wordToGuessArray.join(&quot; &quot;); // Function to handle a guess function guessLetter() { var guess = guessInput.value.toLowerCase(); if (guess.length === 1 &amp;&amp; guess.match(/[a-z]/i)) { if (wordToGuess.includes(guess)) { for (var i = 0; i &lt; wordToGuess.length; i++) { if (wordToGuess[i] === guess) { wordToGuessArray[i] = guess; } } wordToGuessDisplay.innerHTML = wordToGuessArray.join(&quot; &quot;); } else { incorrectGuesses.push(guess); incorrectGuessesDisplay.innerHTML = incorrectGuesses.join(&quot; &quot;); } guessInput.value = &quot;&quot;; } if (wordToGuessArray.indexOf(&quot;_&quot;) === -1) { gameStatus = &quot;You win!&quot;; } else if (incorrectGuesses.length === 6) { gameStatus = &quot;You lose!&quot;; } gameStatusDisplay.innerHTML = gameStatus; } &lt;/script&gt; .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/2023/04/24/JSlesson.html",
            "relUrl": "/2023/04/24/JSlesson.html",
            "date": " • Apr 24, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Developing with Frontend & Backend",
            "content": "Setting up Machines with Conda Scripts . GitHub . What is GitHub? Github is an internet coding sharing service in which users can share and work on code projects. | It is often used in software development. | . | Why do we use GitHub? Why not Google Drive or messages? Github is used because it is built for coding and formatted accordingly. Google Drive and messages are not efficent for sharing code. | . | What&#39;s the difference between Git and GitHub? Git is the act of sharing code and github is the actual sharing platform and executes the git process. | . | Name as many Git commands as you can: git clone | git commit | git clean | git add | . | . Two Main Machines . Which is better, MacOS or Windows? &quot;Neither. I prefer Linux&quot; - Mr. Mort | . | Give some differences between MacOS and Windows in terms of the development we use in APCSP: MAC OS interface is based on the Unix Platform; Microsoft&#39;s is based on Microsoft&#39;s own Windows NT architecture. | . | If you are on Windows, you want to skip the MacOS Setup instructions. | . Our Tools: . What is the first tool you remember installing? The first tool I installed were code kernels. I also remember installing vscode very soon afterwards. | . | Why was installations so hard the first time? Installations were hard the first time because the commands were unfamiliar and I was unable to troubleshoot errors. | . | Without looking back at previous notes, name three tools you remember installing. This can be kernels, extensions, any installation for APCSP, and also write why it is needed. Installed Anacoonda | pip3 requirements.txt | ubuntu | . | . Actual Installations: . Tool setup is a week 0 thing. You should already have the knowledge to set up your machine. There is also a high chance you had to remove your environments and set up your machine again due to errors. If, for some reason, these don&#39;t apply to you, go here to set up your machine, here to check everything working with Bash, and here for Docker setup, which are the main tools on our machine needed to develop in APCSP. . MacOS Conda Scripts . After installing Homebrew, VSCode, and Python2, you&#39;ll need to run these Homebrew commands: . brew list # list packages brew update # update package list brew upgrade # upgrade packages brew install git # install latest git brew install python # install python3 for development python --version # version of python3 installed brew install java # openjdk install . Windows Conda Scripts . To get set up, run these commands: . wsl --install wsl --list wsl --install -d Ubuntu-20.04 # restart machine wsl cd ~ mkdir vscode ls cd ~/vscode # changes the directory to path for vscode files git clone https://github.com/nighthawkcoders/APCSP.git # clone repo cd APCSP # changes the directory to path for APCSP repos assets code . # opens APCSP in VSCode cd .. # changes the directory to the previous/parent directory git config --global user.email mygmail@gmail.com # tell git your email git config --global user.name mygithub # tell git your github id shay@MSI:/mnt/c/Users/ShayM$ git config --global user.email your@email.here shay@MSI:/mnt/c/Users/ShayM$ git config --global user.name yourusernamehere # restart machine PS C: Users UserName&gt; wsl # Windows prompt to WSL command cd /tmp wget https://repo.anaconda.com/archive/Anaconda3-2022.05-Linux-x86_64.sh chmod +x Anaconda3-2022.05-Linux-x86_64.sh # Answer yes to all the prompts ./Anaconda3-2022.05-Linux-x86_64.sh # run apt package commands now sudo apt list # list packages sudo apt update # update package list sudo apt upgrade # upgrade packages sudo apt install python2 # install python2 for package dependencies sudo apt install python3 python3-pip # install python3 and pip3 for development python --version # version of python3 should be shown sudo apt install default-jdk default-jre # java install java --version # java runtime version javac --version # java compiler version sudo apt install unzip # unzip utility . Setting Up Kernels . Now that you have everything installed on MacOS/Windows, we need to get kernels installed so that we can develop inside Fastpages notebooks. To do that, run these commands on both MacOS and Windows: . (base) id:~$ conda --version (base) id:~$ conda install jupyter # install jupyter (base) id:~$ jupyter kernelspec list # list installed kernels Available kernels: python3 /home/shay/.local/share/jupyter/kernels/python3 (base) id:~$ # start in home directory (base) id:~$ pip install bash_kernel # download bash kernel Collecting bash_kernel Downloading bash_kernel-0.7.2-py2.py3-none-any.whl (15 kB) Requirement already satisfied: pexpect&gt;=4.0 in ./anaconda3/lib/python3.9/site-packages (from bash_kernel) (4.8.0) Requirement already satisfied: ptyprocess&gt;=0.5 in ./anaconda3/lib/python3.9/site-packages (from pexpect&gt;=4.0-&gt;bash_kernel) (0.7.0) Installing collected packages: bash-kernel Successfully installed bash-kernel-0.7.2 (base) id:~$ python -m bash_kernel.install # install kernel Installing IPython kernel spec (base) id:~$ jupyter kernelspec list # list kernels Available kernels: bash /home/shay/.local/share/jupyter/kernels/bash python3 /home/shay/.local/share/jupyter/kernels/python3 (base) id:~$ conda install nodejs # node is framework for JavaScript kernel (base) id:~$ npm -version # node package manager comes with nodejs (base) id:~$ npm install -g ijavascript # get the kernel (base) id:~$ ijsinstall # install javascript kernel (base) id:~$ jupyter kernelspec list # list kernels Available kernels: bash /home/shay/.local/share/jupyter/kernels/bash javascript /home/shay/.local/share/jupyter/kernels/javascript python3 /home/shay/.local/share/jupyter/kernels/python3 . By now, you should already know how to clone Git repositories into your VSCode directory. Once you do that, you&#39;re all set for developing with GitHub Pages and Fastpages! . Before We Set Up Pages, A Guide to Git . As we&#39;ve discussed, Git is different from GitHub. Because GitHub is merely the place where we store Git repos, we use Git&#39;s commands to help us get, open, and configure these repositories. Here are some of the Git commands you should be using a lot (In the comments, tell what each Git command does): . git clone {repos-name-here.git} # what does it do? # git clone clones a repository as your own git checkout [branch] # what does it do? # The &quot;checkout&quot; command can switch the currently active branch - but it can also be used to restore files git fork {repos-name-here.git} # what does it do? # a copy of an existing repository in which the new owner disconnects the codebase from previous committers git commit -m {&quot;commit-msg&quot;} # what does it do? # git commit commits or pushes a change based of the &quot;cmmit-msg&quot; git pull # what does it do? # used to fetch and download content from a remote repository and immediately update the local repository to match that content git push # what does it do? # used to upload local repository content to a remote repository # After this line, name other commands that you can use and what they do. This should be easy, as you&#39;ve already answered the qeue git clean # Cleans the working tree by recursively removing files that are not under version control, starting from the current directory git config # lets you get and set configuration variables that control all aspects of how Git looks and operates git add # Moves changes from the working directory to the staging area . Setting Up GitHub Pages . Some of you may have come to know that GitHub Pages is starting to become outdated. So why do we still use it? The answer is that we are in a class, and following a curriculum with something like GitHub Pages is much easier than creating portfolio content from scratch, which becomes quite unecessary. Therefore, we can use GitHub Pages to create this content instead. On the topic of unecessary vs necessary coding, we don&#39;t need to make GitHub Pages from scratch as opposed to using a template that our very own Mr. Mortensen created for us. To do that, we can go to the Leuck Reunion repository and use the template to make our own GitHub Pages. Then, in Ubuntu, we can git clone our repository and open it in VSCode. After we have it open, the last thing we want to do is set up local hosting for this website, so that we can preview it and make changes in real time. To do that, head here to install Jekyll for Ubuntu, here to install Ruby next, and here to finalize the process by installing Bundler. . Setting Up FastPages . In Setting Up Github Pages, we talked about how it is easier to use a template to create portfolio content. It is also easier to use a template when creating the portfolio itself. To do that, we can use Fastpages, which is what we have been using to show our blogs, code, and projects. However, Fastpages has been deprecated for some time now, so the instructions in Week 0 won&#39;t be effective. So, we need to fork the APCSP Fastpages. To do that, follow this video to get started developing with Fastpages. . Hacks . Show how you incorporate three tools that we have installed into your project. 0.1 points for each feature. (0.3). This can include code, but definitely blog about it. | frontend hack goes here | backend hack goes here | .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/quintinpartone",
            "relUrl": "/quintinpartone",
            "date": " • Apr 18, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "AP Computer Science Principles Create Performance Task Project",
            "content": "Shipment Tracking Program . Purpose: To Help businesses manage complexity within their orders/shipments. (elaborated in write-up) | Functionality: This program allows user to store and log shipments, view these shipments, update them, and delete them, as well as assign specified attributes such as date, cost and location. (elaborated further in write-up) | . Update Procedure . The student developed procedure that I have used for my CPT writeup and video is the updateq procedure which is able to update elements within the shipment databse. It is located in the 7th code cell. | Please note that some procedures below are inspired by online material I found on the web. Some lines may be borrowed. However, the updateq procedure I use for my CPT project was developed by myself. In a # note above every code cell, I have identified what is self-developed and what is inspired. | . from flask import Flask from flask_sqlalchemy import SQLAlchemy app = Flask(__name__) database = &#39;sqlite:///sqlite.db&#39; app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() db.init_app(app) . import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash class Shipment_B(db.Model): __tablename__ = &#39;Shipment_business&#39; id = db.Column(db.Integer, primary_key=True) _Shipment = db.Column(db.String(255), unique=True, nullable=False) _Quantity = db.Column(db.String(255), unique=False, nullable=False) _Date = db.Column(db.String(255), unique=False, nullable=False) _Cost = db.Column(db.String(255), unique=False, nullable=False) _Location = db.Column(db.String(255), unique=False, nullable=False) _Status = db.Column(db.String, unique=False) def __init__(self, Shipment, Quantity, Date, Cost, Location, Status): self._Shipment = Shipment self._Quantity = Quantity self._Date = Date self._Cost = Cost self._Location = Location self._Status = Status @property def Shipment(self): return self._Shipment @Shipment.setter def Shipment(self, Shipment): self._Shipment = Shipment @property def Quantity(self): return self._Quantity @Quantity.setter def Quantity(self, Quantity): self._Quantity = Quantity @property def Date(self): return self._Date @Date.setter def Date(self, Date): self._Date = Date @property def Cost(self): return self._Cost @Cost.setter def Cost(self, Cost): self._Cost = Cost @property def Location(self): return self._Location @Location.setter def Location(self, Location): self._Location = Location @property def Status(self): return self._Status @Status.setter def Status(self, Status): self._Status = Status def __str__(self): return json.dumps(self.read()) def create(self): try: db.session.add(self) db.session.commit() return self except IntegrityError: db.session.remove() return None def read(self): return { &quot;id&quot;: self.id, &quot;Shipment&quot; : self.Shipment, &quot;Quantity&quot; : self.Quantity, &quot;Date&quot; : self.Date, &quot;Cost&quot; : self.Cost, &quot;Location&quot;: self.Location, &quot;Status&quot;: self.Status } def update(self, Shipment, Quantity, Date, Cost, Location, Status): if len(Shipment) &gt; 0: self.Shipment = Shipment if len(Quantity) &gt; 0: self.Quantity = Quantity if len(Date) &gt; 0: self.Date = Date if len(Cost) &gt; 0: self.Cost = Cost if len(Location) &gt; 0: self.Location = Location if len(Status) &gt; 0: self.Status = Status db.session.add(self) db.session.commit() return self def delete(self): db.session.delete(self) db.session.commit() return None . # This program code is inspired from online resources; some parts may not be self-developed def initShipment_business(): with app.app_context(): db.create_all() S1 = Shipment_B(Shipment=&#39;Microsoft Microchips&#39;, Quantity=&#39;500,000&#39;, Date=&#39;12/01/2021&#39;, Cost=&#39;$100,000&#39;, Location=&#39;Microsoft Headquarters&#39;, Status=&#39;Shipping&#39;) S2 = Shipment_B(Shipment=&#39;Orlando Fish Farm Salmon&#39;, Quantity=&#39;500&#39;, Date=&#39;09/03/2022&#39;, Cost=&#39;$20,000&#39;, Location=&#39;Orlando Pharmaceuticals&#39;, Status=&#39;Ordered&#39;) S3 = Shipment_B(Shipment=&#39;PVC Pipes&#39;, Quantity=&#39;2,000&#39;, Date=&#39;05/22/2023&#39;, Cost=&#39;$500&#39;, Location=&#39;ID Tech&#39;, Status=&#39;Recieved&#39;) S4 = Shipment_B(Shipment=&#39;Lipo Batteries 360 kWatts&#39;, Quantity=&#39;150&#39;, Date=&#39;10/05/2022&#39;, Cost=&#39;$225&#39;, Location=&#39;Riverhouse, Illinois&#39;, Status=&#39;Shipping&#39;) S5 = Shipment_B(Shipment=&#39;Plywood 4x16 in&#39;, Quantity=&#39;3,000&#39;, Date=&#39;05/03/2023&#39;, Cost=&#39;n/a&#39;, Location=&#39;Lowes Furniture&#39;, Status=&#39;n/a&#39;) S6 = Shipment_B(Shipment=&#39;CAS Texas Instrument&#39;, Quantity=&#39;400&#39;, Date=&#39;12/05/2021&#39;, Cost=&#39;$20,000&#39;, Location=&#39;Del Norte High School mathematics&#39;, Status=&#39;Recieved&#39;) S7 = Shipment_B(Shipment=&#39;Jabra Extendable Headphones&#39;, Quantity=&#39;2,500&#39;, Date=&#39;01/01/2021&#39;, Cost=&#39;$7,687.21&#39;, Location=&#39;Qualcomm Headquarters&#39;, Status=&#39;recieved&#39;) S8 = Shipment_B(Shipment=&#39;Apple Wireless AirPods&#39;, Quantity=&#39;1,500&#39;, Date=&#39;05/05/2025&#39;, Cost=&#39;$18,076.20&#39;, Location=&#39;LS Technology&#39;, Status=&#39;Ordered&#39;) S9 = Shipment_B(Shipment=&#39;Jordan 4s, custom fade&#39;, Quantity=&#39;4&#39;, Date=&#39;08/30/2005&#39;, Cost=&#39;$1,221&#39;, Location=&#39;Drip Nation Headquarters&#39;, Status=&#39;recieved&#39;) S10 = Shipment_B(Shipment=&#39;Tofi Powder&#39;, Quantity=&#39;250 mg&#39;, Date=&#39;09/09/2023&#39;, Cost=&#39;$200&#39;, Location=&#39;Tyler1 Fuelers&#39;, Status=&#39;recieved&#39;) S11 = Shipment_B(Shipment=&#39;No. 2 Pencil&#39;, Quantity=&#39;23,000&#39;, Date=&#39;05/25/2023&#39;, Cost=&#39;$1,500&#39;, Location=&#39;Del Norte High School&#39;, Status=&#39;ordered&#39;) S12 = Shipment_B(Shipment=&#39;Adidas Techs &amp; Fleeces&#39;, Quantity=&#39;122&#39;, Date=&#39;06/26/2022&#39;, Cost=&#39;€15,000&#39;, Location=&#39;Jabari Smith Florence&#39;, Status=&#39;shipping&#39;) S13 = Shipment_B(Shipment=&#39;Forgiato Rims&#39;, Quantity=&#39;82&#39;, Date=&#39;11/12/2023&#39;, Cost=&#39;$2,540&#39;, Location=&#39;Box Headquarters&#39;, Status=&#39;shipping&#39; ) S14 = Shipment_B(Shipment=&#39;Insignia Mouse Pads&#39;, Quantity=&#39;19&#39;, Date=&#39;04/06/2023&#39;, Cost=&#39;$1,100.54&#39;, Location=&#39;Texas Institute of Technology&#39;, Status=&#39;shipping&#39;) S15 = Shipment_B(Shipment=&#39;Whole Market Produce&#39;, Quantity=&#39;1,450&#39;, Date=&#39;08/21/2021&#39;, Cost=&#39;$2,863.22&#39;, Location=&#39;Sprouts assorted locations&#39;, Status=&#39;recieved&#39;) Ship = [S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15] for S in Ship: try: object = S.create() print(f&quot;Added data for {object.Shipment}&quot;) except IntegrityError: print(f&quot;Records exist, duplicate shipments, or error: {S.Shipment}&quot;) initShipment_business() . def find_by_Shipment(Shipment): with app.app_context(): shipment_B = Shipment_B.query.filter_by(_Shipment=Shipment).first() return shipment_B . def create(): Shipment = input(&quot;Name for Shipment:&quot;) Content = find_by_Shipment(Shipment) try: print(&quot;Found n&quot;, Content.read()) return except: pass Quantity = input(&quot;Enter the total # of products within shipment:&quot;) Date = input(&quot;Enter Date of Shipment:&quot;) Cost = input(&quot;Enter Shipment Costs:&quot;) Location = input(&quot;Enter Shipment Location:&quot;) Status = input(&quot;Enter Shipment Staus (oredred/shipping/recieved):&quot;) shipment_B = Shipment_B(Shipment=Shipment, Quantity=Quantity, Date=Date, Cost=Cost, Location=Location, Status=Status ) with app.app_context(): try: object = shipment_B.create() print(&quot;Created n&quot;, object.read()) except: print(&quot;Unknown error uid {Shipment}&quot;) create() . Created {&#39;id&#39;: 31, &#39;Shipment&#39;: &#39;Dunder Mifflin Paper Packages&#39;, &#39;Quantity&#39;: &#39;5,000&#39;, &#39;Date&#39;: &#39;07/15/2018&#39;, &#39;Cost&#39;: &#39;$1,000&#39;, &#39;Location&#39;: &#39;RT Cubicle Company&#39;, &#39;Status&#39;: &#39;Recieved&#39;} . def read(): with app.app_context(): table = Shipment_B.query.all() json_ready = [shipment_B.read() for shipment_B in table] return json_ready read() . [{&#39;id&#39;: 16, &#39;Shipment&#39;: &#39;Microsoft Microchips&#39;, &#39;Quantity&#39;: &#39;500,000&#39;, &#39;Date&#39;: &#39;12/05/2021&#39;, &#39;Cost&#39;: &#39;$150,000&#39;, &#39;Location&#39;: &#39;Microsoft Headquarters&#39;, &#39;Status&#39;: &#39;Recieved&#39;}, {&#39;id&#39;: 17, &#39;Shipment&#39;: &#39;Orlando Fish Farm Salmon&#39;, &#39;Quantity&#39;: &#39;1000&#39;, &#39;Date&#39;: &#39;09/03/2021&#39;, &#39;Cost&#39;: &#39;$28,750&#39;, &#39;Location&#39;: &#39;Orlando Pharmaceuticals&#39;, &#39;Status&#39;: &#39;Shipping&#39;}, {&#39;id&#39;: 18, &#39;Shipment&#39;: &#39;PVC Pipes&#39;, &#39;Quantity&#39;: &#39;2,000&#39;, &#39;Date&#39;: &#39;05/22/2023&#39;, &#39;Cost&#39;: &#39;$500&#39;, &#39;Location&#39;: &#39;ID Tech&#39;, &#39;Status&#39;: &#39;Recieved&#39;}, {&#39;id&#39;: 19, &#39;Shipment&#39;: &#39;Lipo Batteries 360 kWatts&#39;, &#39;Quantity&#39;: &#39;150&#39;, &#39;Date&#39;: &#39;10/05/2022&#39;, &#39;Cost&#39;: &#39;$225&#39;, &#39;Location&#39;: &#39;Riverhouse, Illinois&#39;, &#39;Status&#39;: &#39;Shipping&#39;}, {&#39;id&#39;: 20, &#39;Shipment&#39;: &#39;Plywood 4x16 in&#39;, &#39;Quantity&#39;: &#39;3,000&#39;, &#39;Date&#39;: &#39;05/03/2023&#39;, &#39;Cost&#39;: &#39;n/a&#39;, &#39;Location&#39;: &#39;Lowes Furniture&#39;, &#39;Status&#39;: &#39;n/a&#39;}, {&#39;id&#39;: 21, &#39;Shipment&#39;: &#39;CAS Texas Instrument&#39;, &#39;Quantity&#39;: &#39;400&#39;, &#39;Date&#39;: &#39;12/05/2021&#39;, &#39;Cost&#39;: &#39;$20,000&#39;, &#39;Location&#39;: &#39;Del Norte High School mathematics&#39;, &#39;Status&#39;: &#39;Recieved&#39;}, {&#39;id&#39;: 22, &#39;Shipment&#39;: &#39;Jabra Extendable Headphones&#39;, &#39;Quantity&#39;: &#39;2,500&#39;, &#39;Date&#39;: &#39;01/01/2021&#39;, &#39;Cost&#39;: &#39;$7,687.21&#39;, &#39;Location&#39;: &#39;Qualcomm Headquarters&#39;, &#39;Status&#39;: &#39;recieved&#39;}, {&#39;id&#39;: 23, &#39;Shipment&#39;: &#39;Apple Wireless AirPods&#39;, &#39;Quantity&#39;: &#39;1,500&#39;, &#39;Date&#39;: &#39;05/05/2025&#39;, &#39;Cost&#39;: &#39;$18,076.20&#39;, &#39;Location&#39;: &#39;LS Technology&#39;, &#39;Status&#39;: &#39;Ordered&#39;}, {&#39;id&#39;: 24, &#39;Shipment&#39;: &#39;Jordan 4s, custom fade&#39;, &#39;Quantity&#39;: &#39;4&#39;, &#39;Date&#39;: &#39;08/30/2005&#39;, &#39;Cost&#39;: &#39;$1,221&#39;, &#39;Location&#39;: &#39;Drip Nation Headquarters&#39;, &#39;Status&#39;: &#39;recieved&#39;}, {&#39;id&#39;: 25, &#39;Shipment&#39;: &#39;Tofi Powder&#39;, &#39;Quantity&#39;: &#39;250 mg&#39;, &#39;Date&#39;: &#39;09/09/2023&#39;, &#39;Cost&#39;: &#39;$200&#39;, &#39;Location&#39;: &#39;Tyler1 Fuelers&#39;, &#39;Status&#39;: &#39;recieved&#39;}, {&#39;id&#39;: 26, &#39;Shipment&#39;: &#39;No. 2 Pencil&#39;, &#39;Quantity&#39;: &#39;23,000&#39;, &#39;Date&#39;: &#39;05/25/2023&#39;, &#39;Cost&#39;: &#39;$1,500&#39;, &#39;Location&#39;: &#39;Del Norte High School&#39;, &#39;Status&#39;: &#39;ordered&#39;}, {&#39;id&#39;: 27, &#39;Shipment&#39;: &#39;Adidas Techs &amp; Fleeces&#39;, &#39;Quantity&#39;: &#39;122&#39;, &#39;Date&#39;: &#39;06/26/2022&#39;, &#39;Cost&#39;: &#39;€15,000&#39;, &#39;Location&#39;: &#39;Jabari Smith Florence&#39;, &#39;Status&#39;: &#39;shipping&#39;}, {&#39;id&#39;: 28, &#39;Shipment&#39;: &#39;Forgiato Rims&#39;, &#39;Quantity&#39;: &#39;82&#39;, &#39;Date&#39;: &#39;11/12/2023&#39;, &#39;Cost&#39;: &#39;$2,540&#39;, &#39;Location&#39;: &#39;Box Headquarters&#39;, &#39;Status&#39;: &#39;shipping&#39;}, {&#39;id&#39;: 29, &#39;Shipment&#39;: &#39;Insignia Mouse Pads&#39;, &#39;Quantity&#39;: &#39;19&#39;, &#39;Date&#39;: &#39;04/06/2023&#39;, &#39;Cost&#39;: &#39;$1,100.54&#39;, &#39;Location&#39;: &#39;Texas Institute of Technology&#39;, &#39;Status&#39;: &#39;shipping&#39;}, {&#39;id&#39;: 30, &#39;Shipment&#39;: &#39;Whole Market Produce&#39;, &#39;Quantity&#39;: &#39;1,450&#39;, &#39;Date&#39;: &#39;08/21/2021&#39;, &#39;Cost&#39;: &#39;$2,863.22&#39;, &#39;Location&#39;: &#39;Sprouts assorted locations&#39;, &#39;Status&#39;: &#39;recieved&#39;}] . def updateq(): Shipment = input(&quot;Enter the name of the Shipment to update: &quot;) Content = find_by_Shipment(Shipment) Quantity = input(&quot;Enter the shipment&#39;s new quantity : &quot;) Date = input(&quot;Enter the updated date : &quot;) Cost = input(&quot;Enter the new cost: &quot;) Location = input(&quot;Enter the new location: &quot;) Status = input(&quot;Enter the new status: &quot;) if Content is not None: with app.app_context(): Content.update(Shipment=Shipment, Quantity=Quantity, Date=Date, Cost=Cost, Location=Location, Status=Status) print(&quot;Updated Shipment&quot;, Shipment) else: print(&quot;error&quot;) updateq() . Updated Shipment Orlando Fish Farm Salmon . def delete(): Shipment = input(&quot;Enter the Name of the Shipment you would like to Delete:&quot;) Content = find_by_Shipment(Shipment) try: pass except: Shipment = input(&quot;Try again, that was not a valid Shipment:&quot;) with app.app_context(): try: object = Content.delete() print(&quot;Deleted n&quot;, Content) except: print(&quot;Unknown error uid {Shipment}&quot;) delete() . Deleted {&#34;id&#34;: 31, &#34;Shipment&#34;: &#34;Dunder Mifflin Paper Packages&#34;, &#34;Quantity&#34;: &#34;5,000&#34;, &#34;Date&#34;: &#34;07/15/2018&#34;, &#34;Cost&#34;: &#34;$1,000&#34;, &#34;Location&#34;: &#34;RT Cubicle Company&#34;, &#34;Status&#34;: &#34;Recieved&#34;} . def shipmentmenu(): selection = input(&quot;Enter an action --&gt; add = add a new shipment, view = view a shipment, update = Update a shipment, delete = delete a shipment&quot;) if selection.lower() == &quot;add&quot;: create() elif selection.lower() == &quot;view&quot;: with app.app_context(): table = Shipment_B.query.all() json_ready = [shipment_B.read() for shipment_B in table] return json_ready elif selection.lower() == &quot;update&quot;: updateq() elif selection.lower() == &quot;delete&quot;: delete() else: selection = input(&quot;Please enter a valid action --&gt; add = add a new shipment, view = view a shipment, update = Update a shipment, delete = delete a shipment&quot;) shipmentmenu() . [{&#39;id&#39;: 16, &#39;Shipment&#39;: &#39;Microsoft Microchips&#39;, &#39;Quantity&#39;: &#39;500,000&#39;, &#39;Date&#39;: &#39;12/01/2021&#39;, &#39;Cost&#39;: &#39;$100,000&#39;, &#39;Location&#39;: &#39;Microsoft Headquarters&#39;, &#39;Status&#39;: &#39;Shipping&#39;}, {&#39;id&#39;: 17, &#39;Shipment&#39;: &#39;Orlando Fish Farm Salmon&#39;, &#39;Quantity&#39;: &#39;500&#39;, &#39;Date&#39;: &#39;09/03/2022&#39;, &#39;Cost&#39;: &#39;$20,000&#39;, &#39;Location&#39;: &#39;Orlando Pharmaceuticals&#39;, &#39;Status&#39;: &#39;Ordered&#39;}, {&#39;id&#39;: 18, &#39;Shipment&#39;: &#39;PVC Pipes&#39;, &#39;Quantity&#39;: &#39;2,000&#39;, &#39;Date&#39;: &#39;05/22/2023&#39;, &#39;Cost&#39;: &#39;$500&#39;, &#39;Location&#39;: &#39;ID Tech&#39;, &#39;Status&#39;: &#39;Recieved&#39;}, {&#39;id&#39;: 19, &#39;Shipment&#39;: &#39;Lipo Batteries 360 kWatts&#39;, &#39;Quantity&#39;: &#39;150&#39;, &#39;Date&#39;: &#39;10/05/2022&#39;, &#39;Cost&#39;: &#39;$225&#39;, &#39;Location&#39;: &#39;Riverhouse, Illinois&#39;, &#39;Status&#39;: &#39;Shipping&#39;}, {&#39;id&#39;: 20, &#39;Shipment&#39;: &#39;Plywood 4x16 in&#39;, &#39;Quantity&#39;: &#39;3,000&#39;, &#39;Date&#39;: &#39;05/03/2023&#39;, &#39;Cost&#39;: &#39;n/a&#39;, &#39;Location&#39;: &#39;Lowes Furniture&#39;, &#39;Status&#39;: &#39;n/a&#39;}, {&#39;id&#39;: 21, &#39;Shipment&#39;: &#39;CAS Texas Instrument&#39;, &#39;Quantity&#39;: &#39;400&#39;, &#39;Date&#39;: &#39;12/05/2021&#39;, &#39;Cost&#39;: &#39;$20,000&#39;, &#39;Location&#39;: &#39;Del Norte High School mathematics&#39;, &#39;Status&#39;: &#39;Recieved&#39;}, {&#39;id&#39;: 22, &#39;Shipment&#39;: &#39;Jabra Extendable Headphones&#39;, &#39;Quantity&#39;: &#39;2,500&#39;, &#39;Date&#39;: &#39;01/01/2021&#39;, &#39;Cost&#39;: &#39;$7,687.21&#39;, &#39;Location&#39;: &#39;Qualcomm Headquarters&#39;, &#39;Status&#39;: &#39;recieved&#39;}, {&#39;id&#39;: 23, &#39;Shipment&#39;: &#39;Apple Wireless AirPods&#39;, &#39;Quantity&#39;: &#39;1,500&#39;, &#39;Date&#39;: &#39;05/05/2025&#39;, &#39;Cost&#39;: &#39;$18,076.20&#39;, &#39;Location&#39;: &#39;LS Technology&#39;, &#39;Status&#39;: &#39;Ordered&#39;}, {&#39;id&#39;: 24, &#39;Shipment&#39;: &#39;Jordan 4s, custom fade&#39;, &#39;Quantity&#39;: &#39;4&#39;, &#39;Date&#39;: &#39;08/30/2005&#39;, &#39;Cost&#39;: &#39;$1,221&#39;, &#39;Location&#39;: &#39;Drip Nation Headquarters&#39;, &#39;Status&#39;: &#39;recieved&#39;}, {&#39;id&#39;: 25, &#39;Shipment&#39;: &#39;Tofi Powder&#39;, &#39;Quantity&#39;: &#39;250 mg&#39;, &#39;Date&#39;: &#39;09/09/2023&#39;, &#39;Cost&#39;: &#39;$200&#39;, &#39;Location&#39;: &#39;Tyler1 Fuelers&#39;, &#39;Status&#39;: &#39;recieved&#39;}, {&#39;id&#39;: 26, &#39;Shipment&#39;: &#39;No. 2 Pencil&#39;, &#39;Quantity&#39;: &#39;23,000&#39;, &#39;Date&#39;: &#39;05/25/2023&#39;, &#39;Cost&#39;: &#39;$1,500&#39;, &#39;Location&#39;: &#39;Del Norte High School&#39;, &#39;Status&#39;: &#39;ordered&#39;}, {&#39;id&#39;: 27, &#39;Shipment&#39;: &#39;Adidas Techs &amp; Fleeces&#39;, &#39;Quantity&#39;: &#39;122&#39;, &#39;Date&#39;: &#39;06/26/2022&#39;, &#39;Cost&#39;: &#39;€15,000&#39;, &#39;Location&#39;: &#39;Jabari Smith Florence&#39;, &#39;Status&#39;: &#39;shipping&#39;}, {&#39;id&#39;: 28, &#39;Shipment&#39;: &#39;Forgiato Rims&#39;, &#39;Quantity&#39;: &#39;82&#39;, &#39;Date&#39;: &#39;11/12/2023&#39;, &#39;Cost&#39;: &#39;$2,540&#39;, &#39;Location&#39;: &#39;Box Headquarters&#39;, &#39;Status&#39;: &#39;shipping&#39;}, {&#39;id&#39;: 29, &#39;Shipment&#39;: &#39;Insignia Mouse Pads&#39;, &#39;Quantity&#39;: &#39;19&#39;, &#39;Date&#39;: &#39;04/06/2023&#39;, &#39;Cost&#39;: &#39;$1,100.54&#39;, &#39;Location&#39;: &#39;Texas Institute of Technology&#39;, &#39;Status&#39;: &#39;shipping&#39;}, {&#39;id&#39;: 30, &#39;Shipment&#39;: &#39;Whole Market Produce&#39;, &#39;Quantity&#39;: &#39;1,450&#39;, &#39;Date&#39;: &#39;08/21/2021&#39;, &#39;Cost&#39;: &#39;$2,863.22&#39;, &#39;Location&#39;: &#39;Sprouts assorted locations&#39;, &#39;Status&#39;: &#39;recieved&#39;}] .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/2023/04/17/CPT-Project.html",
            "relUrl": "/2023/04/17/CPT-Project.html",
            "date": " • Apr 17, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a a set. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is 0 s. | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # I notice that the output is 1,2,3 and this is similar to whats in the list/set except the repeated values are not listed again. # I also think the duplicate elemtns have either been combined to the original element or removed temporarily to create a list with no duplicated values. # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # Set, similar to dictionaries, have no repeated values. #Hashing and sets are similar and used in conjuction. . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # This data structure is a dictionary. # This dictionary contains the tiltle, artist, and etc. as well as the tracks of this dictionary. # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . lover_album[&quot;producer&quot;] = set([&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]) # What can you change to make sure there are no duplicate producers? # Make it a set. # Set removes duplicates. # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producer&#39;: {&#39;Louis Bell&#39;, &#39;Frank Dukes&#39;, &#39;Jack Antonoff&#39;, &#39;Taylor Swift&#39;, &#39;Joel Little&#39;}} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) lover_album[&quot;genre&quot;].append(&quot;electropop&quot;) # How would add an additional genre to the dictionary, like electropop? # using append # Printing the dictionary print(lover_album[&#39;genre&#39;]) . [&#39;Pop&#39;, &#39;Synth-pop&#39;, &#39;electropop&#39;] . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # use pprint library # changes made in hacks page . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # use recursion to keep search continuous # use pprint for better format . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | . Favorite Taylor Swift Song Justification . My favorite song is Me! I love this song because I love myself. This is essentially what the song says as well for Taylor Swift also loves herself. &quot;You&#39;ll never find another lover like MEEEEEEE&quot;. I also love the music video because it&#39;s so vibrant and aesthetically pleasing. At the start, there&#39;s this really cool pink snake which is just so creative. Also, the music video stars Brendon Urie who is another one of my favorite singer/songwriters (below Taylor Swift of course). The collaboration on this video was just magnificent. It reminds me why Taylor Swift is the GOAT! | . Also, P.S. Spelling is Fun! .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Hashmaps Hacks",
            "content": "import pprint #import library nba_teams = { &quot;League&quot;: &quot;NBA&quot;, &quot;Country&quot;: &quot;North America&quot;, &quot;Current Season&quot;: &#39;2022-2023&#39;, &quot;Teams&quot;: { 1: &quot;Boston Celtics&quot;, 2: &quot;Chicago Bulls&quot;, 3: &quot;Toronto Raptors&quot;, 4: &quot;Los Angeles Lakers&quot;, 5: &quot;Golden State Warriors&quot;, } } # Printing the dictionary pprint.pprint(nba_teams) . {&#39;Country&#39;: &#39;North America&#39;, &#39;Current Season&#39;: &#39;2022-2023&#39;, &#39;League&#39;: &#39;NBA&#39;, &#39;Teams&#39;: {1: &#39;Boston Celtics&#39;, 2: &#39;Chicago Bulls&#39;, 3: &#39;Toronto Raptors&#39;, 4: &#39;Los Angeles Lakers&#39;, 5: &#39;Golden State Warriors&#39;}} . pprint.pprint(nba_teams.get(&#39;Teams&#39;)) . {1: &#39;Boston Celtics&#39;, 2: &#39;Chicago Bulls&#39;, 3: &#39;Toronto Raptors&#39;, 4: &#39;Los Angeles Lakers&#39;, 5: &#39;Golden State Warriors&#39;} . pprint.pprint(nba_teams.get(&#39;League&#39;)) . &#39;NBA&#39; . nba_teams[&quot;Best Players&quot;] = ([&#39;Lebron James&#39;, &#39;Stephen Curry&#39;, &#39;Jimmy Butler&#39;, &#39;Joel Embiid&#39;, &#39;Ja Morant&#39;, &#39;Giannis Antetokoumpo&#39;, &#39;Lebron James&#39;]) # What can you change to make sure there are no duplicate players? # Take out a duplicate # Make it into a set # Printing the dictionary pprint.pprint(nba_teams) . {&#39;Best Players&#39;: [&#39;Lebron James&#39;, &#39;Stephen Curry&#39;, &#39;Jimmy Butler&#39;, &#39;Joel Embiid&#39;, &#39;Ja Morant&#39;, &#39;Giannis Antetokoumpo&#39;, &#39;Lebron James&#39;], &#39;Country&#39;: &#39;North America&#39;, &#39;Current Season&#39;: &#39;2022-2023&#39;, &#39;League&#39;: &#39;NBA&#39;, &#39;Teams&#39;: {1: &#39;Boston Celtics&#39;, 2: &#39;Chicago Bulls&#39;, 3: &#39;Toronto Raptors&#39;, 4: &#39;Los Angeles Lakers&#39;, 5: &#39;Golden State Warriors&#39;}} . print(&quot;Original List: &quot;, nba_teams[&#39;Best Players&#39;]) res = [*set(nba_teams[&#39;Best Players&#39;])] print(&quot;List after removing duplicate elements: &quot;, res) . Original List: [&#39;Lebron James&#39;, &#39;Stephen Curry&#39;, &#39;Jimmy Butler&#39;, &#39;Joel Embiid&#39;, &#39;Ja Morant&#39;, &#39;Giannis Antetokoumpo&#39;, &#39;Lebron James&#39;] List after removing duplicate elements: [&#39;Joel Embiid&#39;, &#39;Ja Morant&#39;, &#39;Stephen Curry&#39;, &#39;Jimmy Butler&#39;, &#39;Giannis Antetokoumpo&#39;, &#39;Lebron James&#39;] . nba_teams[&quot;Teams&quot;].update({6:&quot;New York Knicks&quot;}) # How would add an additional team # use .update # filter to teams, add new number key they type team name # Printing the dictionary pprint.pprint(nba_teams) . {&#39;Best Players&#39;: [&#39;Lebron James&#39;, &#39;Stephen Curry&#39;, &#39;Jimmy Butler&#39;, &#39;Joel Embiid&#39;, &#39;Ja Morant&#39;, &#39;Giannis Antetokoumpo&#39;, &#39;Lebron James&#39;], &#39;Country&#39;: &#39;North America&#39;, &#39;Current Season&#39;: &#39;2022-2023&#39;, &#39;League&#39;: &#39;NBA&#39;, &#39;Teams&#39;: {1: &#39;Boston Celtics&#39;, 2: &#39;Chicago Bulls&#39;, 3: &#39;Toronto Raptors&#39;, 4: &#39;Los Angeles Lakers&#39;, 5: &#39;Golden State Warriors&#39;, 6: &#39;New York Knicks&#39;}} . for k,v in nba_teams.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # use pprint library . League: NBA Country: North America Current Season: 2022-2023 Teams: {1: &#39;Boston Celtics&#39;, 2: &#39;Chicago Bulls&#39;, 3: &#39;Toronto Raptors&#39;, 4: &#39;Los Angeles Lakers&#39;, 5: &#39;Golden State Warriors&#39;, 6: &#39;New York Knicks&#39;} Best Players: [&#39;Lebron James&#39;, &#39;Stephen Curry&#39;, &#39;Jimmy Butler&#39;, &#39;Joel Embiid&#39;, &#39;Ja Morant&#39;, &#39;Giannis Antetokoumpo&#39;, &#39;Lebron James&#39;] . def search(): search = input(&quot;What would you like to know about the NHL? n For teams type --&gt; Teams&quot;) if nba_teams.get(search.lower()) == None: print(&quot;North America&quot;) else: pprint.pprint(nba_teams.get(search.lower())) search() . North America . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed. . | .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/2023/03/29/DS-hashmaps-hacks.html",
            "relUrl": "/2023/03/29/DS-hashmaps-hacks.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "CB Big Idea 2 Quiz Reflection",
            "content": "Results Overview . .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2023/03/20/Big-Idea-2-Quiz-Reflection.html",
            "relUrl": "/markdown/2023/03/20/Big-Idea-2-Quiz-Reflection.html",
            "date": " • Mar 20, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . What is the purpose of identity Column in SQL database? | What is the purpose of a primary key in SQL database? | What are the Data Types in SQL table? | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? | Same for cursor object? | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | Is &quot;results&quot; an object? How do you know? | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$NE99Tu1nylU0LAaR$a7910b87944ac14cb26bbddb6408e6da2f852094a4eddce47765512ded7e7828&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$B3HUX1tZeVb8ti1R$b75b586467d3bf24588a2c846280754d88e65aa2837ff945ffc8ce26ec92d4a7&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$gAhceQHwpMMzZ44k$b0c6cfce1feb1a882bc3bd8c2b014d0fc5354a237d4eac5dfcf3114a8a6fa8d0&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$lx9xwoLTFSExMXtA$c41d217a1f8f6cf9d3b532f1a52e4959e55ff5517bd6507d2aea9e8a7b8972c9&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$iy58F9KwNJkhmywW$93911c720044f86b7c891de7e946de5a960cce774c6faed9012ca0b544de34b4&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$ntw1dsTG2yCr4RS8$c91d34ae3b4147cf183ca40900d08588c2512eef873e2a8bc06e0aadd5e62afd&#39;, &#39;1921-10-21&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? | Explain purpose of SQL INSERT. Is this the same as User init? | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | Explain try/except, when would except occur? | What code seems to be repeated in each of these examples to point, why is it repeated? | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | In the print statemements, what is the &quot;f&quot; and what does {uid} do? | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | Could you refactor this menu? Make it work with a List? | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Perform Jupyter &#39;Run All&#39; prior to starting menu . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture . Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | The good thing about the previous code program from unit 2.4 part a is that it checks for user uid before adding values into the databse. On the other hand, there is no evidence of this in the program from 2.4 part b. . | . Reference... sqlite documentation .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "CB Quiz 2.2 - 2.3 Reflection",
            "content": "Using Programs With Data Quiz . . Explanation: The key to these types of questions is that I need to select TWO correct answers. Here, I chose Answer C which is wrong because this sequence of steps does not remove any entries with an unknown year, so the entry in the first row of the spreadsheet will have a year value of -1. I should’ve chosen Answer D instead because sorting by year will sort the spreadsheet on column C from least to greatest. Filtering by year will remove any entries with unknown years. Filtering by photographer will remove any entries with unknown photographers. Since the order of the entries is not affected by the filters, the photograph with the lowest year value will be in the first row of the spreadsheet. | . . Incorrect. This information cannot be determined using the data collected. The data does not include information about the costs of individual items, so it is impossible to find the most expensive item purchased on a given date. Correct. For each transaction, the data includes the date of the transaction and the number of items purchased in the transaction. By searching the data to find all transactions that occurred on the given date, and then adding the number of items purchased in each of those transactions, the total number of items purchased on a given date can be determined. | . . The information in the products list can be used to create a list of the product IDs of all products that use AA batteries. Since the products list and the purchases list have the product ID information in common, the list of product IDs can be used in the purchases list to create a list of customer IDs of all the customers who purchased products that use AA batteries. Finally, since the purchases list and the customers list have the customer ID in common, the list of customer IDs can be used to generate a list of e-mail addresses of the customers who purchased products that use AA batteries. | . . To be counted, a show must be a talk show that airs on Saturday or Sunday. Therefore, the AND operator should be used instead of the first OR operator. For a show to be counted, the value of genre must be “talk” and the value of day must be “Saturday” or “Sunday”. | . # . . I should’ve chosen Answer D instead because sorting by year will sort the spreadsheet on column C from least to greatest. Filtering by year will remove any entries with unknown years. Filtering by photographer will remove any entries with unknown photographers. Since the order of the entries is not affected by the filters, the photograph with the lowest year value will be in the first row of the spreadsheet. | . . It is possible to use the animal name supplied by the guest to search the first database. However, the first database does not contain all the information that needs to be displayed. The information to be displayed comes from both databases. The animal name can be used search the first database to find the classification, skin type, and thermoregulation information. The animal name can be used search the second database to find the lifestyle, average life span, and top speed information. | .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2023/03/14/CB-Quiz-Reflection.html",
            "relUrl": "/markdown/2023/03/14/CB-Quiz-Reflection.html",
            "date": " • Mar 14, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Trimester 2 AP CSP Final MCQ Reflection",
            "content": "Reflection . . Overall, as seen in the image above, I got a score of 41/50 whichlands me at an 82% which is around the same score I got last trimester. On last trimester’s final. There was slight improvements here and there. Specifically in the areas that I had practiced from last trimester’s review - the problems I missed the most last MCQ -, I saw significan timprovement in these areas. I can’t say they were exactly perfect but only a couple of errors. However, new units were introduced in this tri 2 mcq which led me to miss multiple problems. Additionally, I had finished after the deadline and was a little rushed to get my test back. But if I work on some of my new flaws, I think I will be in a positing to have a high level understanding of what College Board asks from me in the future AP test. . What To Work On . Like i said before, I think most of the units I worked on since last trimester have been improved a lot so i will stop or reduce working on those types of problems. However, I will focus my efforts on some of the new problems at hand. I noticed, while taking the test and after reflecting over my isssues, that there were a lot of conceptual problems that I missed that included problems such as base. What is base 2? What is the difference between bas 2 and base 16? I hope that I can study these units and get a better understanding. So, after reflecting, here are the most noteable things I need to work on: . I need to work on time management. I noticed that a lot of the problems I missed were in the latter half of the mcq which means that i really got to be able to go through questions swiftly and with pace. I need to make sure that I have enough time for later problems because if I don’t there would be a lot of points that I miss out on. | I need to work on 2.b questions. This was a unit in lst year’s mcq and is one of the only units that i still struggle with. Thus, it is a subject that I need to work on extensively because it is clearly one of my weaksuits. | I also have to work on 3.a questions since these were questions that I didn’t quite understand and lost many points on. | Lastly, another noteable problem I faced were the 4.5 and 4.6 problems which involved binary and procedural code. Some procedures I have a clear concept of but I need to be able to differentiate between each proedure’s weak and strong areas. For example, problem 16 was about the limitations of iteration and I had chosen a problem in repeated values. In actuality, iteration’s weakness lies in the program’s sequencing. | Reworked Problems . Missed Problem #18 . . The problem here is that a public key is the key that is meant to shown to everybody and is thus unimportant. But a group of cookies is a problem for possible cyber threats. | . Missed Problem #19 . . The problem here is that Find Name searches within the given list and ben is in the list in the correct answer and is outside of the list in the incorrect answer. | . Missed Problem #25 . . The problem here is that each student must be assigned a unique value which would make each student’s chance of being selected equal and thus satisfying the program’s purpose. | . Missed Problem #32 . . The elements of the list needed to be sorted in order to use the specific type of search. | . Missed Problem #36 . . I did not notice that there were two asteriks in the first printargs ordered pair which led me to falsely assume it would be A when in actuality it is B. 1*1 22. | .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2023/03/08/Tri-2-CSP-Final.html",
            "relUrl": "/markdown/2023/03/08/Tri-2-CSP-Final.html",
            "date": " • Mar 8, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "N@TM Blog Post",
            "content": "Overview . Del Norte High School holds an event called Night at The Museum which allows students to show off their artistic work. For example, the art class may show off their art pieces and the ceramics students may show off their pottery. For AP Computer Science students, we are demonstrating our programs/projects that we’ve been working on. It allows them to display the hard work they have put in the previous few months. . Unfourtanetly, I was unable to participate in N@TM on that day and thus my goal was to: create a similar Night at The Museum event at home and with my friends. This way I could still show off my work and demonstrate my knowledge. By creating a similar enviroment at home, I can still present my project. | Show off my project to friends and family. Over the break, I tried to get as many viewers as possible to view my project. SOme of these people include my family members. I also shared my project with some of my friends, some of which have taken computer science principles or have cs knowledge. They gave me useful tips on how to improve my program/feature. | I also wanted to explore other people’s projects outside of the realm of computer science. So I invited my friend Derrick who has taken 3D Animation and asked him to show off his project. This made it so my N@TM experience was not just me showing off my feature but also exploring other artistic projects. | | . Presenting at N@TM . Side Note . I got to show off my program to so many people that I got carried away and forgot to take pictures and record them. However, it is the experience that counts, not the recording of it. | . . The first person I showed my program off to was Andrew Reid who just so happened to be available and at school on the day of N@TM. So I ran my program and tried to explain my code. However, I realized that besides the functionality of my program, Andrew had trouble understanding the code behind the scenes. Words like “databases”, “CRUD”, “API”, etc. were all terms that weren’t easy to comprehend. However, he still enjoyed my presentation and I enjoyed my first trial of N@TM. Video of me presenting my project | . . The next person I presented to was Derrick Huang. This time I tried to incorporate more friendly language and a simpler explanation of my feature. After showing off the program itself, I presented the code in categories: frontend, backend, and model. I explained how each one was connected to each other but I may have generalized things too much because although Derrick was getting it, there were several important code blocks that I glossed over. So I learned that in future presentations I needed to use simple language but also delve deep into my project’s many components. | I then presented to several more people and each presentation seemed to be better than the last. Finally, I showed off my project to my mom going through my project and the behind the scenes code in depth but also clearly. However, my mom was not impressed and suggested that I incorporate more complexity to my code which I did by adding a purchase feature. | Ultimately, prsenting my project with my makeshift N@TM was a lot of fun as I got to show off my last few week’s of hard work. And I also got some helpful advice to improve my program which I was very grateful for. | . Looking at Other Projects . . I wasn’t able to see many projects due to my predicament. Many of my friends did not participate in N@TM and of the ones that did, many of them weren’t able to access their projects. However, I was able to view my friend, Derrick Huang’s, 3D animation project. In his project, his purpose was to 3D animate a donut and add additional, creative features around it. . He explained that some people put donuts on a table and put a plant next to it or put it on a car. In any case, the emphasis was on the donut. I was particularly interested in this project because I have experience in art but have never dealt with 3D animation. It was something interesting and something that I wanted to learn. . Derrick showed me his project and it was a decorative donut on a plate with a cup of coffee in the background. There was also a purple brick wall in the back which contrasted the colors of the donut and coffee. Derrick revealed how he did this in order to place emphasis on the main subject, the donut. I found this very fascinating. He also explained how the hardest thing about his project was managing the sprinkles because they would often be displaced and would thus look wonky on the donut. He told me that to solve this, he used filling which filled in a lot of the spaces where sprinkles normally shouldn’t be. It made it easier to put the sprinkles on the donut. . Reflection . Although I wasn’t able to go to the actual Night at The Museum, I was still able to create a similar envirment and have a lot of fun. One unfortunate thing I experienced ws being unable to view other people’s project but I believe there are some greater benefits such as being able to present my project to the people close to me. Through the feedback and experience I gained, I was able to gain futher insights to improve my project. Still prefer Track &amp; Field meets though! .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2023/02/28/N@TM-Blog-Post.html",
            "relUrl": "/markdown/2023/02/28/N@TM-Blog-Post.html",
            "date": " • Feb 28, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "CPT Write Up",
            "content": "Write-Up (Marketplace) . 3a. . 3.a.i. . This program is meant to provide a more streamline system for business managers to store their company’s inventory/products. Users can also view these products if they are interested in purchasing. . 3.a.ii. . This program allows a user to input various attributes of their product such as name, cost, and stock as well as date. My program then generates a ID which is set according to the time the entry was placed. This program is available for all users so it functions as a marketplace, allowing users to search for products they may want to buy. . 3.a.iii. . The inputs of the program are the user’s typed entries into the form for which entries are made. The program collects this data and returns an input stating whether or not the inventory was successfully added - depending on if the user’s entries met the requirements such as filling out all fields - and then may be called upon to displays its entries within the search feature that neatly formats the attributes in a table. . 3.b . 3.b.i. . . 3.b.ii. . . 3.b.iii. . The variables stored are titled respectively through the form box. They are titled product, cost, and stock. There is also ID which is set to current time value. . 3.b.iv. . All the variable in my list ar important to my program because they represent unique and necessary aspects of a product such as it’s name, cost, and how much of the product you have aka stock. It is necessary in order to take read and create data. . 3.b.v . By storing the variables respectively, I manage complexity by preventing duplicate or mistaken values. If my values were the same, I would have conflicting values in my database which would likely lead to it being disfunctional. To fix this through a different method, I would have to lengthen my code and make it more complex. . 3.c . 3.c.i. . . 3.c.ii. . . 3.c.iii. . The procedure here is addProduct. It retrieves the user input from the formboxes. When the ‘click’ is made on each respective button the input from the user is stored and placed into a database which is then displayed within the input field. Also, the program gets elements by their id which is product, cost, and stock respectively. . 3.c.i.v . The code defines a function addProduct which starts by collecting input data from a web form using document.getElementById. The function then proceeds to use selection to check if the username field is empty, and if it is, it displays an alert to the user and returns from the function. If the username field is not empty, the function constructs a data object using sequencing, which contains the input values collected earlier. The function then constructs a requestOptions object also using sequencing which includes the data object, and specifies the HTTP method and content type headers for a POST request. . 3.d . 3.d.i . The user inputs the attributes of their product and clicks on the “addProduct” button. The first call to addProduct procedure passes a command to get and store user input into the system. This call will execute the entire algorithm, constructing the data object, constructing the requestOptions object, and sending a POST request to the specified URL with the data object as the request body. If the request is successful, a success message will be logged to the console and an alert will be shown to the user indicating that the inventory has been added. . 3.d.ii . Conditions for user input manages our program’s recieved input. These conditions are enforced by the placeholders. They make sure user input match the requested structure so that no false input goes in. The second last command of my program enforces that there is something to call back to. Pattern also helps recieved data to mach the specific formatting. Each of these test cases executes different parts of the algorithm, going by the condition of which input fields are filled out for each attribute. . Peer Review Scores and Feedback . Peer Grades .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2023/02/28/CPT-Write-Up.html",
            "relUrl": "/markdown/2023/02/28/CPT-Write-Up.html",
            "date": " • Feb 28, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "CPT Outline",
            "content": "Reporting Category Scoring Criteria Decision Rules . Row 1 Program Purpose and Function | My program demonstrates the following: - input, program functionality, and output. Additionally, the overall purpose is clear and the functionality of the program is demonstrated. | The video shows a demonstration of the program running and the described purpose is actually the functionality of the program. The purpose is actually the functionality of the program. The purpose adresses the problem being solved. | . Row 2 Data Abstraction | I will include two program code segments: one that shows how data has been stored in this list (or other collection type), Additionally, It will show the data in the same list being used as part of fullfilling the program’s purpose. I also identify the name of the variable representing the list being used in the response. | Requirements for program code segments: The written response must include two clearly distinguishable program code segments, but these segments may be disjointed code segments or two parts of a contiguous code segment. All of which I already have in my CPT feature. | . Row 3 Managing Complexity | My program manages complexity by including code segments that show a list being used to manage complexity. Also, I can reveal exactly how it works clearly. | I did not contain lists that are sepertely included and I did not name the selected list. Also the code segment is clear and management of complexity is accurate. | . Row 4 Procedural Abstraction | I have a code segment that shows a procedure with at least one parameter that has an effect on the functionality of the procedure. I also have a code segment that shows where the student-developed procedure is being called. | I describe the identified procedure does and how it contributes to the overall functionality of the program. The parameter used in the procedure is explicit and is defined in the header of the procedure. | . Row 5 Algorithm Implementation | I include a program code segment of a student developed algorithm that includes: sequencing, selection, and iteration. I will also explain in detailed steps how the identified algorithm works in enough detail that someone elso could recreate it. | The algorithm being described can utilize existing language functionality or library calls. The algorithm contains selection and iteration as well as sequencing. | . Row 6 Testing | I describe two calls to the selected procedure identified in written response 3c. Each call passes a different argument that causes a different segment of code in the algorithm to execute. | I describe the condition being tested by each call to the procedure. I also identify the result of each call. Finally, I consider the implicit and explicit parameters used by the selected procedure which satisfys the CPT requirements. | .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2023/02/09/CPT-guidelines.html",
            "relUrl": "/markdown/2023/02/09/CPT-guidelines.html",
            "date": " • Feb 9, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Big Idea 5.6 Safe Computing",
            "content": "Personal Identifiable Information (PII) . As we create a Web Site and post information we are adding to the Searchable PII. However, there is a dichotomy as a site like LinkedIn is a place where we want to be known for our accomplishments. But be aware, the person that looks at your LinkedIn will, most likely, look at things like TikTok, Instagram or Facebook. . PII Considerations . Things that will be known by everyone: Name, Email (suggest a junk email), Picture, High School attended, College Attended, Properties you own, State-City of residence, all State-City of previous residence, Credit Reports, … | Gray area items, more cautious: Birth date, Place of Birth, Street Address, Phone Number, Maiden names of Mother and Grandmother, Drivers License Number, … | Things that you should strive to keep absolutely secret: Credentials for Access, Two-Factor Authentication on Financial accounts, Social Security Number, Tax records, … | . Beware, Establish practices for your own Safety . Multi-factor authentication often requires you to enter a code that has been texted or emailed to you. Other types of authentication are biometrics (finger print or facial recognition). | Malware is often sent in attachments to things in email. Often they request you to click on an attachment and it starts the process of adding a virus to your computer. | Phishing is where unknown sources try to entice you into a response, like click here and receive $500. Often such systems impersonate someone like Amazon asking for login information. Be careful to look closely at source of email (ie amzn.com vs amazon.com). | . Factors to Increase Security of System . Most of my financials or critical systems use Multi Factor authentication | Biometrics is something that is used secure systems, fingerprints or facial recognition | Symmetric encryption is a type of encryption where only one key (a secret key) is used to both encrypt and decrypt electronic information. | Asymmetric cryptography, also known as public-key cryptography, is a process that uses a pair of related keys – one public key and one private key – to encrypt and decrypt a message and protect it from unauthorized access or use. | SSL Uses both Asymmetric and Symmetric Encryption | . Nefarious Uses of Internet . A Virus or Malware compromise security, they are opposite of increasing security. | Phishing is a way to get a Virus on your machine, or a way to get you to input PII. | After a Virus or being compromised by Phishing it is advised to review all of you PII vulnerabilities. | . Blog Post Reflection . Describe PII you have seen on project in CompSci Principles. | What are your feelings about PII and your personal exposure? | Describe good and bad passwords? What is another step that is used to assist in authentication. | Try to describe Symmetric and Asymmetric encryption. | Provide an example of encryption we used in AWS deployment. | Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. | Some PII in our own project consists of the Personal Identifiable Information inputted by the user, usually when they try to sign up on our login page. Hwere, they will input PII like their name, email, phone number. We then use this information to create connections between our users. | PII is good for websites to personalize and create a suitable enviroment but is dangerous because it can be used against the person. Someone can use public PII to find out about a person’s location and if they get access to other personal exposure, they can do much more dangerous things. | Good passwords have multiple characters, all of which are hard to guess and make sense to the user. They can consist of capital and undercase letters, number, signs, words, etc. Bad Passwords are easy to guess and thus easy to break in. Another step that assists in authentication is another detail, perhaps a username or a email account that adds an extra layer of security. | Symmetric encryption is encryption that makes sense to the user and the holder. It makes the password undecipherable to outside perspectives. Asymmetric encryption is encryption that neither outsiders nor users can understand. The only ones with access to these are the holders themselves. | An example of encryption used in AWS deployment was password encryption in the containers. Users could not access if weren’t in the same regional district. | One phishing technique is downloading from an untrustable website. When you download something and aren’t sure what it is, it can likely be a virus or other form of malware that can end up disrupting your device. | .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2023/02/08/5.6-Safe-Computing.html",
            "relUrl": "/markdown/2023/02/08/5.6-Safe-Computing.html",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Big Idea 5.5 Legal and Ethical Concerns",
            "content": "Cost of Free . In Mr Mortensen’s most recent years in industry, there were many Lawyers making a profession on Patents and how they can be impacted on General Public Licensing (GPL). . | Qualcomm makes its money on patents, if you use GPL software you could be voiding your rights to charge for software and patents. Open Source by nature, specifically GPL, says any derivative work is free and code should be shared. Qualcomm wants all derivative work to require a royalty payment payment, also anyone who uses the idea/patent pays royalty. . | From synopsis.com, “Black Duck® software composition analysis (SCA) helps teams manage the security, quality, and license compliance risks that come from the use of open source and third-party code in applications and containers.” Qualcomm has had 20 technical jobs and 3 lawyers analyzing all the code produced, analyzing code for Open Source inclusion, and analyzing impact of such licenses to its ability to charge royalties for the use of their Patents. . | This may sound like a simple problem, but think about the Students of Today, often they are given an assignment and instead of developing their own algorithm they opt to copy something off the internet. Well, don’t think the Workers of Today are entirely different. In summary, it is important to know the type of software license you are copying, it could impact billions of dollars in business. . | . Icense Communities, License Types Guide . Adding and selecting a license GitHub instructions. An author, a licensor, needs to determine a license. This may result in asking… Do I want to waive default copyright in reuse? | Do I want to allow derivative works or not? | Do I want to require all derivative code to be shared? | . | . Creative Commons Zero v1.0 Universal . The Creative Commons CC0 Public Domain Dedication waives copyright interest in a work you’ve created and dedicates it to the world-wide public domain. . Open Source MIT License . This license in friendly to someone like Qualcomm! This allows using code freely and making and distributing closed source versions. Typically, the author of software with MIT License want credit. Credit could be as simple as adding the authors name in comments. . Close source means the GitHub project could be private. . Open SOurce GPL License . The GNU GPLv3 also lets people do almost anything they want with your project, except distributing closed source versions. . Open source means the GitHub project must be public. . For a company like Qualcomm, they are required to institute many practices to deliver their code in parts (public vs private). Isolating their patent and secret code, far away from the GPL or Creative Commons code. In fact, a company that is protecting their patents may need to division engineers, split distribution, not deploy to public, etc. After distribution, the customer of the Patented (ie Qualcomm) product is required to put the public/private domain code back together again. . Legal and Ethically . We need to comply with the terms of licenses. We need to cite sources. (I am particularly bad with internet pictures. However, in the picture of the Black Duck above I am actually advertising the Company). . As consumers, we have become aware that Music and Movie companies own content. These companies build DRM (Digital Rights Management) software to protect, play, and/or distribute content. Most of us buy subscriptions to services. However, some figure out ways to bypass systems and allow download. Often we will see these sites disappear, as they are illegal. . In software, it can be more complicated to understand all the Creative Commons licenses and its impact to our own ideas and businesses. Mostly, if we use things in class, there is “no problem” with Open Source as our usage is considered educational use. Creative Commons software has enabled amazing innovation as we are able to do so much for free, as we have done in this class. However, Individuals and Companies are required to figure out techniques and business models in order to use Open Source software according to terms of license. . Long ago, I remember being amazed that Red Hat was not selling its Linux distribution, they were giving away the software. They had to! This was in the terms of the licenses they were using, GPL. However, as an early pioneers in Linux distributions, they established a business model around buying their support agreement. They rose in fortune, became a public company, and had an amazing Initial Public Offering (IPO). Many, many vendors have followed the Red Hat model in building free distributions and establishing unique business models. Qualcomm figured out how to mix Patent and GPL businesses and have flourished since abandoning all proprietary, to include Android in its very complicated business model using Android. . Creative Commons, Open Source are free terminologies! However, businesses will not last without income. And today, businesses won’t last without engineers pulling Open Source software. . Blog Post Reflection . When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. | In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. | Make a license for your personal (blog) and Team repositories for the CPT project. Be sure to have a license for both Team GitHub repositories (frontend/backend). Document license(s) you picked and why. FYI, frontend, since it is built on GitHub pages may come with a license and restrictions. Document in blog how team made license choice and process of update. | One license type is The Creative Commons CC0 Public Domain Dedication which waives copyright interest in a work you’ve created and dedicates it to the world-wide public domain. In other words, this license allows you to work on and create off of preexisting data but you have to publish it aka make it public. | GPL is one example of licensing. They established a business model around buying their support agreement. They rose in fortune, became a public company, and had an amazing Initial Public Offering (IPO). Many, many vendors have followed the Red Hat model in building free distributions and establishing unique business models. Qualcomm figured out how to mix Patent and GPL businesses and have flourished since abandoning all proprietary, to include Android in its very complicated business model using Android. | We settled on the ___ license because … | .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2023/02/08/5.5-Blog-Post.html",
            "relUrl": "/markdown/2023/02/08/5.5-Blog-Post.html",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Big Idea 5.4 Crowdsourcing",
            "content": "Crowdsourcing . The more you crowdsource, the more you reach beyond your own community, the more likely you will reduce Computer Bias. Crowdsourcing provides the ability to obtain shared information, share information, and participate in distributed computing. . Evidence of Crowdsourcing . Wikipedia has a ton of information from crowdsourcing, see Wikipedia definition on crowdsourcing. It can have inaccuracies, but when it does it often is corrected through a self-policing community. Reviews and many authors have made this, according to many, better than “official” information. | Crypto currency and associated block chain. All exchanges of money are validated at least 3-times by independent miners. If there is a flaw in the independent calculations the process is checked and performed again. Innovation of crypto crowdsourcing has impact on how governments think about currency. Additionally, block chain algorithms are being considered for many other crowdsourcing most private data (ie medical records). | COVID data, it is easy to recognize areas that are contributing and not contributing. This data has impacted all our lives and decision we make on attending public events, flying on planes, or wearing masks. The community of data and analysts will spawn many new ways of thinking about data that impacts lives. | . Obtaining Data Via Crowdsourcing . We have all experienced Crowdsourcing by using external data through API’s, namely RapidAPI. This data has influenced how we code and shown possibilities in obtaining and analyzing data. Discuss APIs you have used. | We have all participated in code Crowdsourcing by using GitHub. Many of you have forked from the Teacher repository, or exchanged code with fellow students. Not only can we analyze GitHub code, but we can obtain profiles and history about the persons coding history. What is the biggest discovery you have found in GitHub? The biggest discovery I have found on Github is the ability to add images and adjust them using html and css. I can also organize many other things such as tables or texts which allows for interesting designs. | . | Kaggle datasets for code and science exploration. The avenue of data points us youtube or netflix channels. Analyzing crowd data helps us make decisions. Exam top 10 to 20. Did you see anything interesting? The data sets are usually about a certain issue and present data useful in supporting a certain claim. For example, one such data set is Video game, Crime, Drop-out data set. This data set reveals correlations between videogames and crime which is not relevant for our project but can be used to prove a claim. | . | . Hacks . Think of a use case for crowdsourcing in you project … . CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? We have all participated in code Crowdsourcing by using GitHub. Many of us have forked from the Teacher repository, or exchanged code with fellow students. Another way we can crowdsource is by having people outside of CSP review our website. This will allow fresh users to make comments that’ll likely avoid bias. | . | What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? Del Norte crowdsourcing comes in many forms. AP Stat students may ask questions from different classes to gather data to their questions. ASB elects officials through a democratic vote which is another example of crowdsourcing. We can crowdsource in our own project by asking for user input. | . | What kind of data could you capture at N@tM to make evening interesting? Perhaps use this data to impress Teachers during finals week. One piece of data I could capture at N@tM is parent and student feedback. I’ll ask them “how can we improve our website?” Then, using the data I gather, I will implement them and show them to Mr. Mort potentially to show usage of crowdsourcing. | . | .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2023/02/02/Big-Idea-Crowdsourcing.html",
            "relUrl": "/markdown/2023/02/02/Big-Idea-Crowdsourcing.html",
            "date": " • Feb 2, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Big Idea 5.3 Computing Bias",
            "content": "Computer Bias . Earlier we talked about beneficial and harmful effects of computing. Such conversation often lead to conversations on computer bias, particularly when bias creates a harmful effect. . As programmers, you now have the possibility of creating algorithms. It has been said, “Humans are error-prone and biased”. So, does that mean algorithms and the computers they run on are better? . Intentional or Purposeful bias (Crossover Group Up, 10 minutes) . Google “What age groups use Facebook” vs “… TikTok”? What does the data say? Is there purposeful exclusion in these platforms? | Is it harmful? Should it be corrected? Is it good business? | Why do virtual assistants have female voices? Amazon, Alexa Google, Apple Siri. Was this purposeful? Is it harmful? Should it be corrected? Is it good business? | Talk about an algorithm that influences your decisions, think about these companies (ie FAANG - Facebook, Amazon, Apple,Netflix, Google) The age groups for Facebook and TikTok are likely very different. Facebook likely has a older age group of around 18 or older such as adults whereas TikTok will have a younger age group of around 18 or less. Each group targets a different select audience: Facebook targets adults/ young adults and TikTok targets children/teenagers. I wouldn’t say there is any purposeful exclusion because you can still find teenagers on Facebook and adults on TikTok. However, this exclusion may be harmful since it causes a platform divide between generations. Different age generations will like different things and cause a divide between people. It should be stopped but its good for businesses since it allows them to target certain audiences. | Virtual Assistants may use female voices because it is often viewed as more welcoming and helpful than a mans voice. This is likely purposeful because it might give the customer a better impression of their product. However, using female voices in assistant services is very problematic because it causes a bias around women and men. It generates a bias that women are generally assistants which is not tru. It also creates a bias that men can not speak interestingly. These are both bad biases that although may be helpful to businesses, are harmful to gender roles. | Amazon or Google might use algorithms that suggest products to you or sell your information to companies. However, some may view this as a breach of privacy. I, personally, don’t appreciate search engines selling my information. Similarly to before, Businesses benefit from this, selling and advertising things the user will want. Some may argue this algorithm is helpful because it suggests products that the user will want, personalizing a person’s advertisements. | . | . As Pairs (5 minutes) . Watch the video… HP computers are racist | Come up with some thoughts on the video and be ready to discuss them as I call on you. Here are some ideas… | Does the owner of the computer think this was intentional? If yes or no, justify you conclusion. | How do you think this happened? | Is this harmful? Was it intended to be harmful or exclude? | Should it be corrected? | What would you or should you do to produce a better outcome? | . | The owner of the video does not think this is intentional because it doesn’t looks like he’s mad and it looks like he’s joking. However, he does mention that HP computers are racist explicitly so it’s hard to tell. | I think this happened because the lighting makes the guy’s facial features dim down, harder to tell. Thus, it’s possible that the Hp computer didn’t pick up on the guys face and thus, wasn’t able to track it. | The HP computer is harmful because it doesn’t allow certain people to use their face tracking feature. However, it wasn’t intended to be harmful. HP is a large company and will likely get in a lot of trouble for purposeful exclusion. It was likely just a weak camera tracking system. | This camera feature should be tried to be fixed. Fixing the feature would allow all people to use it which is ideal. However, it should be noted that troubleshooting takes time. | I should be aware of computing bias and think about if there are any problems with my program that benefit us but harm the user like with the examples of Google and Amazon. I should also consider people’s backgrounds: age, ethnicity, religion, etc. and make sure no one is excluded from our features. | . Hacks . In this world, there are many baises in computer programs, companies, and apps. It is important to take note of these biases and try to void them as much as possible. One bias could be age and how different apps such as Facebook and TikTok have different targeted age groups. On is adult while the other targets teenagers. However, diversity in these types of apps is very important because it leads to less seperation. Another bias can be caused by race, ethnicity, etc. such as with the example of HP’s computer face tracking. In our own program regarding helping companies with shipment, one bias we may need to consider is small vs big businesses. We should help all businesses alike and thus we should be aware of possible biases in our features/ program. .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2023/02/01/Computing-Bias.html",
            "relUrl": "/markdown/2023/02/01/Computing-Bias.html",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Project Blog",
            "content": "Filters . Category Expectation Explanation/Response . Program Purpose and Function | Describes the purpose of the program, describes the program’s functionality, and can take an input and return an output. | The purpose of this program is to provide the user with a way to sort their shipments. Specifically, when a shipment is associated with a specific date, title, or importance. | . Data Abstraction | Shows how data has been stored in a collection and shows data from that collection as it contributes to the overall purpose of the program. Identifies the name of a variable representing the collection being used and describes what the data contained in the collection represents in the program. | Will store user data through shipment titles, dates, and specificity. For example, if user wants to remove a shipment, I may implement a trash option to delete it. | . Managing Complexity | Shows a collection of data that manages complexity. Explains an alternative method that would have been more complex and explains why that method could not be used or how it would have to be written differently. | This feature will manage complexity by allowing the user to sort by preferences, not just by name. | . Procedural Abstraction | Shows a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure, and shows where that procedure is called. Describes how the procedure contributes to the functionality of the program. | This will be clearly done simply just by coding out the necessary steps. Parameter will be included through the use of word limits. | . Algorithm Implementation | Includes a student-developed algorithm that includes sequencing, selection, and iteration. Explains how the algorithm works in detail enough to where someone could recreate it. | Listing inventory into a detailed table that stores the inventory’s information will have sufficient algorithms to fit this criteria. | . Testing | Describe two calls to the selected procedure in response 3c. Each call must pass a argument that causes different outputs. Describes conditions being tested by each call. Identifies the result of each call. | We will test two different features in each section, which test certain conditions and output different results. | . CPT . Each team member will be programming a special feature for the management system, so the individual create performance tasks will be focused on the respective features. For the n@tm project, we plan on intertwining each feature together to build one large application. . Code Pertaining to Guidelines . User should be able to input inventory to keep track of their detailed product in a table | They should be prompted with a button to click on | Once clicked, the button should navigate the user to the attributes of the inventory, including things such as the data of input, user name, name of item, and quantity. | User should then be able to click another button that adds all this into a neat table for the user to view and refer back to whenever needed | A “delete item” button will be implemented to allow the user to get rid of the item if needed, and an “edit item” will also be implemented so that the user can make changes on the go. | . Video Ideation . I plan to show my aspect of the feature by first, inputting an item into the table, with specified attributes. The next is editing the item once it has already been in display in the neat table, and finally, testing to see the functionality of each selected feature for sorting through the inputted data. .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2023/01/31/Project-Blog.html",
            "relUrl": "/markdown/2023/01/31/Project-Blog.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "College Board MCQ Reflection",
            "content": ". Overall, I got a 41/50 on the CB MCQ | This is equivalent to a 82% which is decent but not ideal. In order to improve this score, there are certain areas that I need to work on: | looking through the problems I missed, I noticed a lot of my missed questions were on 1.D which consisted of units from 3.6-3.11. Some of these units were: Nested Conditionals, Developing Algorithms, Algorithmic Efficiency, and Binary Search. | To improve in these areas, I will go back to my notes and review the content. I will also look at the College Board videos and use the examples from my videos to quiz myself. This will hopefully give me a better understanding of content that I’m unfamiliar of and aid me when I take the AP Exam. | .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2023/01/31/College-Board-MCQ.html",
            "relUrl": "/markdown/2023/01/31/College-Board-MCQ.html",
            "date": " • Jan 31, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "Big Idea 5.1 and 5.2 Canvas Reflection",
            "content": "Blog Post Reflection . Questions . Think of three beneficial effects of your projects based on 5.1 Unit | Think of a potential harmful effect of your project. | Answer with an opinion and learnings so far this year: What are pros/cons on internet blockers at router and lack of admin password on lab machines at school? | What concerns do you have personally about the digital divide? For yourself or for others. | . Reflection . One beneficial effect of our project is that it makes shipping easier because everything is stored and accounted for. Another beneficial effect is that interactions can be done through our project. Also, people can jot down their thoughts and communicate via our project. | A potentially harmful effect of our project is that it may be inconvenient for users if not enough people use our project. If most shipping transactions outside of our website, our users would need to view these actions elsewhere, making our project minimal if not used consistently. | Pros are that internet blockers prevent people from accessing inappropriate websites. Websites that aure untrustworthy, addicting, or distracting can all be restricted. However, the harmful effects of internet blockers is that students can’t access necessary tools that are helpful. For example, web restrictions prevent students from accessing AWS and forces them to use a vpn. | I’m concerned about the digital divide and how restrictions can prevent someone from learning. For students at this school, internet restrictions and lack of tools can be harmful and inconvenient. For less fortunate schools, I’m concerned that they have no tools at all, making them unable to learn or code. | .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2023/01/25/Canvas-Blog-Reflection.html",
            "relUrl": "/markdown/2023/01/25/Canvas-Blog-Reflection.html",
            "date": " • Jan 25, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "Presentation Notes",
            "content": "Project Idea: Club Execs 1st slide - Goals . Help Club Executives 2nd slide - Club List Database | Frontend details/ preview | Shows what has been done so far and what they plan to do in the fututre 3rd slide - club reviews | presents Features 4th slide - club documents | presents database | Also reveals how group is organized and meeting deadline requirements | Scrumboard and Spreadsheet | Manifesto | .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2023/01/24/Purpose.html",
            "relUrl": "/markdown/2023/01/24/Purpose.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "Big Idea 5.2 Digital Divide",
            "content": "Digital Divide is the difference in access to technology. Deals with “To Have and Have Not” in relation to computers, internet, or technology in general. . Some people may have no access to the internet or have worn down computers prevents students from being digitally equipped and being able to learn and perform | . | Comparatively, Del Norte High School has access to digital software and internet | Digital Divide between Del Norte and other schools | . Contributing factors to divide are socioeconomic, geographic, and demographic . In San Digeo, there is a regional divide marked by the interstate 8 | Some Religious groups like the amish choose not to use technology | . In education equity requires school to provide materials like computers and chromebooks. . However, there is still a digital divide in the way chromebooks a are hard for coding and have restrictions on them that prevent installation of coding platforms such as vscode | . Blog Post Reflection - Digital Empowerment . One can empower themselves in the digital world by using the resources they have to do the best in their field. A student may have a lack of resources but should still use free chromebooks, school internet, etc. to get their work done. Also, empowerment can be made if more,better resources can be provided. If everone had access to internet and functional computers, computation would be much more equal. | Someone that is empowered can help someone who is not empowered by sharing access to resources or donating unneeded materials. Someone who needs to create a physics project could greatly benefit from plastic, cardboard, scissors, tubes, etc. even if someone does not need them. | I believe red tape is the hindrance to digital empowerment because certain rules are unnecessary and prevent people from critically thinkng/ exploring. Website regulations, download regulations all affect a student’s learning. |",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2023/01/24/5.2-Digital-Divide.html",
            "relUrl": "/markdown/2023/01/24/5.2-Digital-Divide.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "Big Idea 5.1 Beneficial and Harmful Effects",
            "content": "Main Idea . Every invention whether it’s in computer science or something else, has its benefits and its downsides/ disruptions . Ex: Chat GPT Chat GPT helps people create assignments just by running through it | redfines the necessity and purpose of search engines | However, it discourages critical thinking | Also, Chat GPT is full of bias because there is only one answer and other answers are not considered | . | . Dopamine and its Benefits and Negatives . Dopamine is another example of something that has borth positive and negative effects . Rosner was a professional gamer who was an example of this. He was celebrated as a World of Warcraft builder and he got lots of dopamine from his success. However, this dopamine was although exciting, it was also detrimental for Rosner. He reported that his grades started tanking and found other healthier activities such as going to the gym and watching films. | Thus, there were both benefits and harmful effects to Dopamine | . Phone Trees . Phone Trees are another example where despite a reduction in need for employees, the process of getting the customer to where they want was time consuming and inconvenient (harmful effect) . Blog Post Reflection . Most developers try to aim for positive effects. However, not every effect of a computing innovation is anticipated in advance. Some effects are harmful. For example, inventors of television, computers, mobile devices, and social media did not intend to unleash a slew of negative consequences for children. shortened attention spans | lack of connection to nature | cyber bullying and hate groups | spread of misingormation and fake news The intention was to produce a convenient and modern form of entertainment which in some ways, these fields achieve their goals. | . | Dopamine Issues are definetely real and I have experienced these issues myself. Sometimes, I can get caught up watching videos or scrolling through social media because of that instant dopamine effect which definetely prevented me from doing homework and affecting my academics. However, some forms of dopamine can definetely be beneficial.Finishing a project you worked long and hard on or helping others can serve as sources of dopamine that aren’t necessarily bad. |",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2023/01/24/5.1-Beneficial-and-Harmful-Effects.html",
            "relUrl": "/markdown/2023/01/24/5.1-Beneficial-and-Harmful-Effects.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$nTQ...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$JPM...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$iHV...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$US0...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$2cC...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$nTQ...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$JPM...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$2I7...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$US0...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$2cC...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$nTQxZ9alViZd3WOn$34c90a641520c96e3d91ac148340b8b07d3c0958249dfcfe4a3eb05e2621efef&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$JPMovUtCRid1pCTE$089368f59621e8878ea730e5328bd9fc442f1d63f40d99f52502c059f9921281&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$2I7yhf1jQOPNu2YE$473f9f24b42cbbd52d6fd4effe03b73ba41ff31ea5532940480aadef56b3ce2d&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$US0fsfAaoQix8ido$5b6bac49c74a9fe08b18147a8d0f5c41d7805c42238a9d29dc2e8dbafff8324f&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$2cC6Hp5Z4WcmxpBK$df9ed2dbe43edee11d7dc5101057274b2c47be5db95d6610ab7e4fba2dbf6d17&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$nTQxZ9alViZd3WOn$34c90a641520c96e3d91ac148340b8b07d3c0958249dfcfe4a3eb05e2621efef&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$JPMovUtCRid1pCTE$089368f59621e8878ea730e5328bd9fc442f1d63f40d99f52502c059f9921281&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$2I7yhf1jQOPNu2YE$473f9f24b42cbbd52d6fd4effe03b73ba41ff31ea5532940480aadef56b3ce2d&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$US0fsfAaoQix8ido$5b6bac49c74a9fe08b18147a8d0f5c41d7805c42238a9d29dc2e8dbafff8324f&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$2cC6Hp5Z4WcmxpBK$df9ed2dbe43edee11d7dc5101057274b2c47be5db95d6610ab7e4fba2dbf6d17&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2004, 12, 31) age = calculate_age(dob) print(age) .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/2023/01/10/PBL-model.html",
            "relUrl": "/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "AP CSP Tri 2 Portfolio",
            "content": "3.1-3.2 Variables, Assignments, and Data Abstractions . Variable: an abstraction inside a program that can hold a value . Types of Variables | Integer: A number | Text/String: A word | Boolean: Data that determines if something is true or false | . # String name = &quot;table1&quot; print(name, type(name)) # Integer number = 4 print(number, type(number)) # Booleans isAbsent = False print(isAbsent, type(isAbsent)) . table1 &lt;class &#39;str&#39;&gt; 4 &lt;class &#39;int&#39;&gt; False &lt;class &#39;bool&#39;&gt; . Data Abstraction is a method used in coding to represent data in useful form, by taking away aspects of data that aren&#39;t being used in the situation . List = ordered sequence of elements | element = individsual value in a list that is assigned to a unique index | index = a way to reference the elements in a list or string using natural numbers; each element of a string is referenced by an index | string = ordered sequence of characters (Letters, numbers, special characters) | . def Reverse(lst): new_lst = lst[::-1] return new_lst lst = [&quot;pink&quot;, &quot;green&quot;, &quot;purple&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;blue&quot;, &quot;black&quot;] print(Reverse(lst)) . [&#39;black&#39;, &#39;blue&#39;, &#39;orange&#39;, &#39;yellow&#39;, &#39;purple&#39;, &#39;green&#39;, &#39;pink&#39;] . Managing Complexity is improving code readability and efficiency . Lists can be used to manage complexity | . colorList = [&quot;green&quot;, &quot;red&quot;, &quot;pink&quot;, &quot;purple&quot;, &quot;blue&quot;, &quot;brown&quot;] print(str(colorList)) . [&#39;green&#39;, &#39;red&#39;, &#39;pink&#39;, &#39;purple&#39;, &#39;blue&#39;, &#39;brown&#39;] . 3.3-3.4 Mathematical Expressions and Strings . An algorithm: a set of instructions that can accomplish a specific task . Sequencing: Algorithms do taks in the order of specification | Selection: Helps choose two different outcomes based off a decision | Iteration: If a conditions is true, then the code can repeat | def Reverse(lst): new_lst = lst[::-1] return new_lst lst = [&quot;pink&quot;, &quot;green&quot;, &quot;purple&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;blue&quot;, &quot;black&quot;] print(Reverse(lst)) . [&#39;black&#39;, &#39;blue&#39;, &#39;orange&#39;, &#39;yellow&#39;, &#39;purple&#39;, &#39;green&#39;, &#39;pink&#39;] . Flowcharts: The use shapes and arrows to represent the steps of an algorithm . . Basic Operations . Subtraction: . represented by &quot;-&quot; | . Addition: . represented by &quot;+&quot; | . Multiplication . represented by &quot;*&quot; | . Division . represented by &quot;/&quot; | . Getting the Remainder represented by &quot;MOD&quot; (% in python) . num1 = 10 num2 = num1 -25 num3 = 100*num1 num4 = num1/num2 num5 = 9 % num4 print(num5) . -0.3333333333333328 . Order of operations in programming are performed in the same order as operations in mathematics. . Strings . A string is a collection of characters. Can be numbers, letters, spaces, special symbols, etc. String concatenation is combining two or more strings to make a new strings in order to create a new string A substring is a part of and already existing string. . cookie = &quot;choclate&quot; cookie2 = &quot;rasin&quot; len1 = len(cookie) / 2 len1 = str(len1) len2 = len(cookie2) * 45 len2 = str(len2) vote1 = cookie + &quot; vote: &quot; + len2 vote2 = cookie2 + &quot; vote: &quot; + len1 votes = vote1 + &quot; &quot; + vote2 print(votes) . choclate vote: 225 rasin vote: 4.0 . Unit 3 Section 5-7 . A boolean is a data type with two possible values: true or false Relational operators could use operators to determine if the average of 5 grades is greater than 80 . gradeList = [90, 65, 60, 75, 95] averageGrade = sum(gradeList)/len(gradeList) if averageGrade &gt; 80: print(&quot;the average grade is&quot; + averageGrade + &quot;%&quot;) else: print(&quot;The average grade is below 80%&quot;) . The average grade is below 80% . Logical Operators are similar to relational operators but these operators don&#39;t necessarily deal with equivalent/non-equivalent values, but they rather work on operands to produce a singular boolean result . AND: returns TRUE if the operand around it are TRUE | OR: returns TRUE if at least one operand is TRUE | NOT: returns TRUE if the following boolean is FALSE | . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;, 1&gt;2 or 5 &lt; 12) # NOT function print(&quot;24&gt;8:&quot;, not 24&gt;8) # AND function print(&quot;10&gt;20:&quot;, 10&gt;20 and 20&lt;10) . 1 &gt; 2 or 5 &lt; 12: True 24&gt;8: False 10&gt;20: False . Selection: uses a condition that evaluates to true or false Algorithm is a finite set of instructions that accomplish a specific task . x=20 y=10 if x&gt;y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . x is greater than y . Nested Conditional statements consist of conditional statements within other conditional statements . utilizes if else statements within if else statements | basics of a nested conditional | . . 3.9-3.11 Algorithms and Binary Search . Lists . Lists: a sequence of variables . we can use lists to store multiple items into one variable | used to store collections of data | changeable, ordered, allow duplicates | . fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;] print (fruits) . [&#39;apple&#39;, &#39;grape&#39;, &#39;strawberry&#39;] . brands = [&quot;nike&quot;, &quot;adidas&quot;, &quot;underarmour&quot;] numbers = [1, 2, 3, 4, 5] truefalse = [True, False, True] . Lists are just one of four collection data types in Python . Tuple: collection that is ordered, unchangeable, allows duplicates | Set: collection that is unordered, unchangeable, doesn&#39;t allow duplicates | Dictionary: collection that is ordered, changeable, doesn&#39;t allow duplicates | . Terms . Index: a term used to sort data in order to reference to an element in a list (allows for duplicates) | Elements: the values in the list assigned to an index | . fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;] index = 1 print (fruits[index]) . grape . Methods in Lists . append() - adds elements to the end of the list insert() - adds element at given position reverse() - reverses the lsit order count() - returns the amount of elements with the specified value clear() - removes the elements from the list . Try this . Determine the output of the code segment words &lt;- &quot;old&quot;, &quot;car&quot;, &quot;unusual&quot;, &quot;new&quot;, &quot;bold&quot;, &quot;far&quot;, &quot;away&quot; index &lt;- 1 FOR EACH word IN words If LEN(word) = 3 REMOVE(words, index) . ELSE index &lt;- index + 1 . Display(words) This will output &quot;unusual&quot;, &quot;bold&quot;, &quot;away&quot; | . Iteration . Iteration allows you to go back in a certain value within a list . it is important for time and sanity | formally, Iteration is the repetition of a process or utterance applied to the result or taken from a previous statement. | . Iteration statements . Else: when the condition does not meet, do statement() | Elif: when the condition does not meet, but meets another condition, do statement() | Break: stop the loop | . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] inp = input().lower() output = &quot;&quot; for letter in inp: for word in words: if letter == word[0]: output += word + &quot; &quot; print(inp + &quot; n&quot; + output) . bruh bravo romeo uniform hotel . 3.9-3.11 . An algorithm is a process or set of rules to be followed through CODE. There are set limitations, this is what makes algorithms fun, you can use your own imagination and create whatever you want with your instructions. . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) else: if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) else: print(&quot;It is too cold outside!&quot;) . It&#39;s too hot outside! . Conditions vs Booleans . The condition and instructions are what differ, that&#39;s where the magic happens. The condition is a boolean expression when an expression outputs either true or false. Boolean values are another type of data type in programming languages, and they can only ever hold true or false. . IsHoliday = False IsWeekday = True if IsHoliday: driveWork = True else: if IsWeekday: driveWork = True else: driveWork = False print(driveWork) . True . Flowchart: Flowcharts can help you visualize the functionality of a program . . Selection: A process used in algorithms where a conditional if-statements leads to one of two outcomes . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) if (varx %2 == 0): print(&quot;the number is even&quot;) else: print(&quot;the number is odd&quot;) . choose value for x the number is even . Iteration: . A process used in algorithms that allows certain things to happen until a condition is satisfied . - Once the condition is satisfied, then an outcome is produced - This can take the form of a for-loop, while-loop, and/or if-statement . | . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] inp = input().lower() output = &quot;&quot; for letter in inp: for word in words: if letter == word[0]: output += word + &quot; &quot; print(inp + &quot; n&quot; + output) . whatever whiskey hotel alfa tango echo victor echo romeo . What is Binary Search? . Binary search is a search algorithm that finds the position of a target value within a sorted array. Binary search compares the target value to the middle element of the array. | An algorithm for iterating to find a value inside a data set | . def BinarySearch(array, x, low, high): # Repeat until the pointers low and high meet each other while low &lt;= high: mid = low + (high - low)//2 # find the middle (taking the higest index number plus the lowest and divided by two) if array[mid] == x: # if desired number is the middle is found return desired number (middle number) return mid elif array[mid] &lt; x: low = mid + 1 else: high = mid - 1 return -1 array = [3, 4, 5, 6, 7, 8, 9] x = 4 result = BinarySearch(array, x, 0, len(array)-1) if result != -1: print(&quot;Element is present at index &quot; + str(result)) else: print(&quot;Not found&quot;) . Element is present at index 1 . 3.12-3.13 . A procedure is a named group of programming instructions that may have parameters and return values. | Parameters are input values of a procedure. Arguments specify the values of the parameters when procedure is called. | . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) if (varx %2 == 0): print(&quot;the number is even&quot;) else: print(&quot;the number is odd&quot;) . choose value for x the number is even . One type of abstraction is procedural abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it manages complexity in a program | . | Simply, procedural abstraction is naming and calling a prewritten procedure | . def letterGradeCalculator(percent): if (percent &lt; 60): return &quot;F&quot; elif (percent &gt;= 60) and (percent &lt; 70): return &quot;D&quot; elif (percent &gt;= 70) and (percent &lt; 80): return &quot;C&quot; elif (percent &gt;= 80) and (percent &lt; 90): return &quot;B&quot; elif (percent &gt;= 90) and (percent &lt; 100): return &quot;A&quot; else: return &quot;A+&quot; percent = int(input(&quot;What is your percent grade?&quot;)) print(percent) print(letterGradeCalculator(percent)) . 92 A . Subdivision of a program into separate subprograms is called modularity | . Code Segment 1 Code Segment 2 . ROTATE_LEFT() | detourLeft() | . MOVE_FORWARD()|turnCorner()| ROTATE_RIGHT |MOVE_FORWARD()| MOVE_FORWARD()|MOVE_FORWARD()| MOVE_FORWARD() ROTATE_RIGHT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() MOVE_FORWARD MOVE_FORWARD() . 3.14-3.15 Libraries and Random Values . A library is a collection of precompiled codes that can be used later on in a program for some specific well-defined operations. | These precompiled codes can be referred to as modules. Each module contains bundles of code that can be used repeatedly in different programs. | A library may also contain documentation, configuration data, message templates, classes, and values, etc. | . import numpy as np new_matrix = np.array([[1, 2, 3],[4, 5, 6],[7, 8, 9]]) print (new_matrix) . [[1 2 3] [4 5 6] [7 8 9]] . Pillow allows you to work with images. | Tensor Flow helps with data automation and monitors performance. | Matplotlib allows you to make 2D graphs and plots. | . . An Application Program Interface, or API, contains specific direction for how the procedures in a library behave and can be used. | An API acts as a gateway for the imported procedures from a library to interact with the rest of your code. | . . Random number generation (RNG) produces a random number (crazy right?) This means that a procedure with RNG can return different values even if the parameters (inputs) do not change | . | . import random n = 1 sum = 0 while n &gt; 0: sum = sum + random.randint(1 , 6) n = n - 1 break n = 0 print(sum) . 6 . 3.17-3.18 Undecidable Problems . Algorithmic Efficiency - the ability of an algorithm to solve a problem in an efficient way . Decision Problem - a problem in computer science and mathematics that can be solved by a yes-no answer, also known as a binary answer. . Decidable Problem - a problem in computer science and mathematics for which an algorithm can be created that can always produce a correct answer or solution. . Undecidable Problem - a problem in computer science and mathematics for which it is impossible to create an algorithm that can always provide a correct answer or solution. . def divideThirteen(number): if number % 13 == 0: return True else: return False print(divideThirteen(26)) print(divideThirteen(30)) . True False . i = 0 number = 1 def integerTest(n): # Testing if the number is an integer if n%1 ==0: return True else: return False # Using while loop to keep searching an a non-integer above 1. Note that the computer runs forever. while i == 0: number += 1 if integerTest(number) == False: i +=1 print(&quot;Done&quot;) .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/jupyter/libraries",
            "relUrl": "/jupyter/libraries",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Unit 3 Sections 17-18",
            "content": "3.17: Algorithm Efficiency . Purpose: . The purpose of this lesson is to help students understand how to make an efficient program and optimize it and understand its importance to the CSP curriculum. . What is Algorithmic Efficiency? . The ability of an algorithm to solve a problem in an efficient way An efficient algorithm solves a problem quickly and with a minimum amount of resources, such as time and memory. | . | How do we determine if an algorithm is efficient or not? One way we can do this is by determining the time complexity of the algorithm. | Another way is through space complexity. | . | . Traveling Merchant Problem Hacks: . What did you and your team discuss? (record below) . An heuristic solution is an approach to a problem that produces a solution that isn&#39;t necessarily optimal but can be used when normal methods take forever | . Describe the method used to solve the traveling merchant problem. (record below) . 3.18: Undecidable Problems . Purpose: . The purpose of this lesson is to introduce students to the concept of undecidable problems in computer science and to explain why these problems are important. . Key vocabulary: . Decision problem | Decidable problem | Undecidable problem | . Decision Problem . A decision problem is a problem in computer science and mathematics that can be solved by a yes-no answer, also known as a binary answer. In other words, a decision problem is a problem for which there are only two possible outputs:&quot;yes&quot; or &quot;no&quot;. There are two types of decision problems that Collegeboard goes over: . Decidable Problems | Undecidable Problems | . A decidable problem is a problem in computer science and mathematics for which an algorithm can be created that can always produce a correct answer or solution. In other words, a decidable problem is a problem for which there exists an algorithm that can be used to determine whether a given input is a valid solution or not. . An undecidable problem problem is a problem in computer science and mathematics for which it is impossible to create an algorithm that can always provide a correct answer or solution. This means that it is not possible for an algorithm to always determine whether a given input is a valid solution to an undecidable problem. . Decidable Problems . A decidable problem is an algorithm that can always have an output of yes or no given any input. It is always correct. . Example of a Decidable Problem . The procedure below tests to see if a number is divisible by 13. If it is, it returns true. If it isn&#39;t, it returns false. . def divideThirteen(number): if number % 13 == 0: return True else: return False print(divideThirteen(26)) print(divideThirteen(30)) . True False . Undecidable Problems . An Example of a Forever Running Code . The code keeps adding 1 to the variable number until number is no longer an integer(This is not the python data type &quot;integer&quot;, it&#39;s the integer in number theory). However, there is no end to this code, making the computer run forever. There is no halt to the code. . i = 0 number = 1 def integerTest(n): # Testing if the number is an integer if n%1 ==0: return True else: return False # Using while loop to keep searching an a non-integer above 1. Note that the computer runs forever. while i == 0: number += 1 if integerTest(number) == False: i +=1 print(&quot;Done&quot;) . KeyboardInterrupt Traceback (most recent call last) Cell In[1], line 12 10 while i == 0: 11 number += 1 &gt; 12 if integerTest(number) == False: 13 i +=1 14 print(&#34;Done&#34;) Cell In[1], line 5, in integerTest(n) 3 def integerTest(n): 4 # Testing if the number is an integer -&gt; 5 if n%1 ==0: 6 return True 7 else: KeyboardInterrupt: . The Halting Problem . The halting problem is an example of an undecidable problem. It states that it is not always possible to correctly determine whether a code halts or runs forever. . There is no way to write an algorithm to analyze and determine whether a body of code can run forever or not. . Halting Problem Example: . In order to understand this, suppose that an algorithm was able to analyze whether a code halts or not. Let&#39;s call this algorithm HaltChecker. | HaltChecker analyzes the program,program P, and its input,input I. If program P halts with input I, HaltChecker returns an output of &quot;halts&quot;. If program P doesn&#39;t halt(runs forever) with input I, HaltChecker returns an output of &quot;never&quot;. For example, in the code where it tests if variable number, the code runs forever, so HaltChecker returns an output of &quot;never&quot;. | Then, we add another algorithm called Reverser which reverses HaltChecker&#39;s output. So, if &quot;never&quot; is the output of HaltChecker, then the output of Reverser is &quot;halts&quot;. It&#39;s also the same the other way around: if HaltChecker has an output of &quot;halts&quot;, then Reverser has an output of &quot;never&quot;. | We combine these algorithms into one entire body of code. | Since Reverser is the algorithm at the end, hence giving the ultimate output, notice how it prints &quot;never&quot; when in fact there is an end(As proved by HaltChecker), and how it also prints &quot;halts&quot; when there is in fact is no end to the code(Also proved by HaltChecker). As a result, HaltChecker is inaccurate and this is an undecidable problem. | . This Diagram Sums up the Entire Process in the Bulleted List: . Credits of diagram and example to Khan Academy . FAQ . Q: If Reverser is causing the problem, why not remove it? | A: Removing Reverser will remove the problems, however, we are looking for ways which create the problem of not outputting a correct result. One example is enough to prove that it is an undecidable problem since it proves that the code is not completely accurate. | . Extra Things to Notice . Note that while a computer may take a long time to run a section of code, it does not mean that the computer is going to run forever. | Humans are able to solve some undecidable problems. The entire Halting Problem example was to prove that computers cannot solve undecidable problems. | . Hacks . Come up with one situation in which a computer runs into an undecidable problem. Explain why it is considered an undecidable problem. . 3.17 Homework . Your homework for Algorithmic Efficiency is pretty simple. . Use the 1st code below and graph it (Desmos, TI Inpire Cas, e.t.c), change the x value only! | Label the number of loops done as x and the time (microseconds) to find the index as y | Connect the points | Do the same thing with the 2nd code | Compare the two graphs and explain which one of the two is more efficient and why (min. 2 sentences) | Insert images of the graph either in your blog or on review ticket | import time def linear_search(lst, x): start_time = time.perf_counter_ns() # records time (nanoseconds) for i in range(len(lst)): # loops through the entire list if lst[i] == x: # until the x value we are looking for is found end_time = time.perf_counter_ns() # records time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Found element after {} loops in {} microseconds&quot;.format(i+1, total_time)) # prints the results return print(&quot;Your number was found at&quot;, i) end_time = time.perf_counter_ns() # records the time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Element not found after {} loops in {} microseconds&quot;.format(len(lst), total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lst = list(range(1, 10001)) # list with numbers 1-10000 x = 5000 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) linear_search(lst, x) # runs procedure . import time def binary_search(lt, x): start_time = time.perf_counter_ns() # starts timer low = 0 # sets the lower side mid = 0 # sets mid value high = len(lt) -1 # sets the higher side num_loops = 0 # number of loops the search undergoes to find the x value while low&lt;=high: # Loop ran until mid is reached num_loops += 1 # adds one loop each time process is repeated mid = (low + high) // 2 # takes the lowest and highest possible numbers and divides by 2 and rounds to closest whole # if lt[mid] == x: end_time = time.perf_counter_ns() # records time total_time = (end_time - start_time) // 1000 # time in microseconds print(&quot;Element found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return mid # returns the index value elif lt[mid] &gt; x: # if mid was higher than x value, then sets new highest value as mid -1 high = mid -1 elif lt[mid] &lt; x: low = mid + 1 # if mid was lower than x, sets the new low as mid + 1 end_time = time.perf_counter_ns() total_time = (end_time - start_time) // 1000 print(&quot;Element not found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lt = list(range(1, 10001)) # list with numbers 1-10000 x = 149 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) binary_search(lt, x) # runs procedure . 3.18 Homework: . Use the Jupyter notebook to write an algorithm that solves a decidable problem. You can use math or whatever else you would like to do. | Write code to get the computer to run forever. Check this example if you need help, but please come up with your own idea. | Homeworks, hacks, and classwork(filled in blanks) for both 3.17 and 3.18 are due on Thursday at 9:00 pm. -0.1 points for each day late. .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/lesson",
            "relUrl": "/lesson",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Unit 3 Sections 14 and 15",
            "content": "Libraries . A library is a collection of precompiled codes that can be used later on in a program for some specific well-defined operations. | These precompiled codes can be referred to as modules. Each module contains bundles of code that can be used repeatedly in different programs. | A library may also contain documentation, configuration data, message templates, classes, and values, etc. | . Why are libraries important? . Using Libraries makes Python Programming simpler and convenient for the programmer. | One example would be through looping and iteration, as we don’t need to write the same code again and again for different programs. | Python libraries play a very vital role in fields of Machine Learning, Data Science, Data Visualization, etc. | . A few libraries that simplify coding processes: . Pillow allows you to work with images. | Tensor Flow helps with data automation and monitors performance. | Matplotlib allows you to make 2D graphs and plots. | . The AP Exam Refrence Sheet itself is a library! . Hacks: . Research two other Python Libraries NOT DISCUSSED DURING LESSON and make a markdown post, explaining their function and how it helps programmers code. . API&#8217;s . An Application Program Interface, or API, contains specific direction for how the procedures in a library behave and can be used. | An API acts as a gateway for the imported procedures from a library to interact with the rest of your code. | . Activity: Walkthrough with NumPy . Install NumPy on VSCode: Open New Terminal In VSCode: | pip3 install --upgrade pip | pip install numpy | | . REMEMBER: When running library code cells use Python Interpreter Conda (Version 3.9.12) . Example of using NumPy for arrays: . import numpy as np new_matrix = np.array([[1, 2, 3],[4, 5, 6],[7, 8, 9]]) print (new_matrix) . [[1 2 3] [4 5 6] [7 8 9]] . Example of using NumPy for derivatives: . import numpy as np # defining polynomial function var = np.poly1d([2, 0, 1]) print(&quot;Polynomial function, f(x): n&quot;, var) # calculating the derivative derivative = var.deriv() print(&quot;Derivative, f(x)&#39;=&quot;, derivative) # calculates the derivative of after # given value of x print(&quot;When x=5 f(x)&#39;=&quot;, derivative(5)) . Polynomial function, f(x): 2 2 x + 1 Derivative, f(x)&#39;= 4 x When x=5 f(x)&#39;= 20 . Random Values . Random number generation (RNG) produces a random number (crazy right?) This means that a procedure with RNG can return different values even if the parameters (inputs) do not change | . | CollegeBoard uses RANDOM(A, B), to return an integer between integers A and B. RANDOM(1, 10) can output 1, 2, 3, 4, 5, 6, 7, 8, 9, or 10 | In Python, this would be random.randint(A, B), after importing Python&#39;s &quot;random&quot; library (import random) | JavaScript&#39;s works a little differently, with Math.random() returning a value between 0 and 1. To match Python and CollegeBoard, you could make a procedure like this | . | . | . CollegeBoard Example: What is the possible range of values for answ3 . Convert the following procedure to Python, then determine the range of outputs if n = 5. . PROCEDURE Dice(n) sum ← 0 REPEAT UNTIL n = 0 sum ← sum + RANDOM(1, 6) n ← n - 1 RETURN sum . import random # Fill in the blank n = 1 sum = 0 while n &gt; 0: sum = sum + random.randint(1 , 6) n = n - 1 break n = 0 # Code here print(sum) # Will output a range of __ to __ . 3 . Homework . Write a procedure that generates n random numbers, then sorts those numbers into lists of even and odd numbers (JS or Python, Python will be easier). . | Using NumPy and only coding in python cell, find the answer to the following questions: a. What is the derivative of 2x^5 - 6x^2 + 24x? b. What is the derivative of (13x^4 + 4x^2) / 2 when x = 9? . | Suppose you have a group of 10 dogs and 10 cats, and you want to create a random order for them. Show how random number generation could be used to create this random order. . | import random def numsorter(n = int): numbers = [random.randint(0, 100) for i in range(n)] EvenNumbers = [num for num in numbers if num % 2 == 0] OddNumbers = [num for num in numbers if num % 2 &gt; 0] print(OddNumbers) print(EvenNumbers) n = int(input(&quot;Enter any number (1-100)&quot;)) numsorter(n) . [99, 19, 57, 29, 77, 43, 65, 35, 27, 31, 15, 69, 87, 1, 77, 91, 77, 3] [8, 28, 0, 98, 60, 62, 96, 92, 60, 52, 86, 40, 8, 14, 66, 70, 18, 90, 52, 90, 96, 74, 50, 72, 54, 34, 0, 32, 58, 88, 82, 40] .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/jupyter/libraries",
            "relUrl": "/jupyter/libraries",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Links to Lessons",
            "content": "Unit Link . 3.1-3.2 Variables and Assignment | https://dillonlee06.github.io/ZestyYeungsReborn/jupyter/week%2013/2022/11/27/Variable-Assignment.html | . 3.3-3.4 Mathematical Expressions and Strings | https://manigggg18.github.io/manimani/jupyter/lesson2 | . 3.5-3.7 Boolean Expression and Conditionals | https://jasoxddd.github.io/booleanConditionals/2022/12/14/boolean.html | . 3.8-3.10 Boolean Iteration and Lists | https://teamorborb.github.io/TeamOrbOrb/lesson%20plans/2022/11/28/Unit_3.8_3.10.html | . 3.9-3.11 Developing Algorithms and Binary Search | https://gwang1224.github.io/repository_1/trimester%202%20student%20teaching/2022/12/02/unit3-9-11.html | . 3.12-3.13 Calling and Developing Procedures | https://docs.google.com/presentation/d/1stQzqXT_n2BdQsnACnW3t4ZYaIePEVOL6Rs6aomxDKI/edit | . 3.14-3.15 Libraries and Random Values | https://saavangade.github.io/Saavan/ap%20csp/unit%203/section%2014/section%2015/lesson/2022/12/11/Lesson-Unit-3-Section-14-15.html | . 3.16 Simulations | https://t-dev-ccm.github.io/Fastpage-setup/lesson/2022/12/12/Simulations.html | . 3.17-3.18 Algorithm Efficiency and Undecidable Problems | https://mmaxwu.github.io/Tri2-GroupFastpages/lesson | .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/lessons/2022/12/09/Odin-Homework.html",
            "relUrl": "/lessons/2022/12/09/Odin-Homework.html",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Title",
            "content": "print(&quot;what did you get out of 40?&quot;) currentPoints = int(input()) currentGrade = currentPoints / 40 currentPercent = currentGrade * 100 print(&quot;Percent score:&quot;) print(currentPercent) . what did you get out of 40? Percent score 95.0 . print(&quot;what did you get out of 50?&quot;) currentPoints = int(input()) currentGrade = currentPoints / 50 currentPercent = currentGrade * 100 print(&quot;Percent score:&quot;) print(currentPercent) . what did you get out of 50? Percent score: 98.0 .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/2022/12/08/Procedures.html",
            "relUrl": "/2022/12/08/Procedures.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Unit 3 Sections 12-13",
            "content": "Calling Procedures . Slide 1: . A procedure is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as method or function, depending on the programing language. | Parameters are input values of a procedure. Arguments specify the values of the parameters when procedure is called. | A procedure call interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was called. | . Slide 2: . When calling procedures, it&#39;s important to take notice to whether it returns data, or a block of statements. | If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and inputting the arguments. | If the procedure returns some sort of data like a boolean or value, then you will assign that value to a variable | . Slide 3: . Assume the Temperature outside is Fahrenheit. | The procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius. | Convert the following psuedocode to python | . def convertFahrenheit(): # code goes here return celsius convertFahrenheit(outsideTemp) . NameError Traceback (most recent call last) Cell In[1], line 5 1 def convertFahrenheit(): 2 # code goes here 3 return celsius -&gt; 5 convertFahrenheit(outsideTemp) NameError: name &#39;outsideTemp&#39; is not defined . Developing Procedures . Slide 8: . Picking a descriptive name is important in case you revisit the code later on (separate words with capitals) There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. . Slide 9: . In this example, a teacher is writing a program that will replace the grade on a previous quiz if the new grade is better than the previous. . What would be a good name for this procedure? | What parameters do we need for this procedure? | Try writing this procedure out in python based on the given pseudocode | . currentGrade &lt;- currentPoints / 40 currentGrade &lt;- current Grade * 100 if currentGrade &gt; quizGrade quizGrade &lt;- currentGrade . Procedural Abstraction . One type of abstraction is procedural abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it | This is very helpful in managing complexity in a program | Subdivision of a program into separate subprograms is called modularity | A procedural abstraction may extract shared features to generalize functionality instead of duplicating code. This allows for program reuse, which helps manage complexity | When a pre-written procedure is called, you don’t necessarily need to know the details of this, just what it does and how to call it | Simply, procedural abstraction is naming and calling a prewritten procedure | Making sure to include the right arguments so the procedure can do what its supposed to do is crucial | . Complexity Example . One of the biggest advantages of procedural abstraction is managing complexity. . Think about the process of simplifying the code? What do you think the advantage of the code segment on the left is? . Code Segment 1 Code Segment 2 . ROTATE_LEFT() | detourLeft() | . MOVE_FORWARD()|turnCorner()| ROTATE_RIGHT |MOVE_FORWARD()| MOVE_FORWARD()|MOVE_FORWARD()| MOVE_FORWARD() ROTATE_RIGHT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() MOVE_FORWARD MOVE_FORWARD() . Hacks . Write a python procedure about something which can help you in school, for example the teacher’s function we spoke about earlier. | Points will be awarded based on creativity and functionality | 0.1 points will be deducted for late submissions | Submit the notes with all blanks filled in (scored out of 0.5 points) and the python procedure (scored out of 0.5 points) by Monday 12/12 at 11:59 PM. | . def letterGradeCalculator(percent): if (percent &lt; 60): return &quot;F&quot; elif (percent &gt;= 60) and (percent &lt; 70): return &quot;D&quot; elif (percent &gt;= 70) and (percent &lt; 80): return &quot;C&quot; elif (percent &gt;= 80) and (percent &lt; 90): return &quot;B&quot; elif (percent &gt;= 90) and (percent &lt; 100): return &quot;A&quot; else: return &quot;A+&quot; percent = int(input(&quot;What is your percent grade?&quot;)) print(percent) print(letterGradeCalculator(percent)) . 85 B .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/lessons/2022/12/07/developing-procedures.html",
            "relUrl": "/lessons/2022/12/07/developing-procedures.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Title",
            "content": "temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) else: if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) else: print(&quot;It is too cold outside!&quot;) . It is too cold outside! . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) if (temp &lt; 65): print(&quot;It is too cold outside!&quot;) . It&#39;s too hot outside! Sure I will play outside! . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) print(varx) while varx != 1: if (varx %2 == 0): varx = varx/2 print(varx) # add Display else: varx = varx * 3 + 1 print(varx) # add Display print(varx) . choose value for x 18 9.0 28.0 14.0 7.0 22.0 11.0 34.0 17.0 52.0 26.0 13.0 40.0 20.0 10.0 5.0 16.0 8.0 4.0 2.0 1.0 1.0 . def BinarySearch(array, x, low, high): # Repeat until the pointers low and high meet each other while low &lt;= high: mid = low + (high - low)//2 # find the middle (taking the higest index number plus the lowest and divided by two) if array[mid] == x: # if desired number is the middle is found return desired number (middle number) return mid elif array[mid] &lt; x: low = mid + 1 else: high = mid - 1 return -1 array = [3, 4, 5, 6, 7, 8, 9] x = 4 result = BinarySearch(array, x, 0, len(array)-1) if result != -1: print(&quot;Element is present at index &quot; + str(result)) else: print(&quot;Not found&quot;) . Element is present at index 1 .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/2022/12/07/Hacks.html",
            "relUrl": "/2022/12/07/Hacks.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Lists and Iterations",
            "content": "Lists and Iterations . Lists . What are lists? . Lists: a sequence of variables . we can use lists to store multiple items into one variable | used to store collections of data | changeable, ordered, allow duplicates | . List examples in Python, JavaScript, and Pseudocode . fruits = [“apple”, “grape”, “strawberry”] print (fruits) . const fruits = [“apple”, “grape”, “strawberry”]; . fruits &lt;- [apple, grape, strawberry] . More List examples . brands = [“nike”, “adidas”, “underarmour”] numbers = [1, 2, 3, 4, 5] truefalse = [True, False, true] . Lists are just one of four collection data types in Python . Tuple: collection that is ordered, unchangeable, allows duplicates | Set: collection that is unordered, unchangeable, doesn’t allow duplicates | Dictionary: collection that is ordered, changeable, doesn’t allow duplicates | . Terms . Index: a term used to sort data in order to reference to an element in a list (allows for duplicates) | Elements: the values in the list assigned to an index | . fruits = [“apple”, “grape”, “strawberry”] index = 1 . print (fruits[index]) . Methods in Lists . append() - adds elements to the end of the list insert() - adds element at given position reverse() - reverses the lsit order count() - returns the amount of elements with the specified value clear() - removes the elements from the list . Try this . Determine the output of the code segment words &lt;- “old”, “car”, “unusual”, “new”, “bold”, “far”, “away” index &lt;- 1 FOR EACH word IN words If LEN(word) = 3 REMOVE(words, index) ELSE index &lt;- index + 1 Display(words) This will output “unusual”, “bold”, “away” | . Iteration . First, what not to do . Iteration is important for your time and sanity Coding a lot of blocks indivisually takes a lot of unnecessary time, how can we shorten this time? . Iteration Iteration is the repetition of a process or utterance applied to the result or taken from a previous statement. There’s a lot of types of iteration though, what to use? How do we apply iteration to lists? . Some methods include using a “for loop”, using a “for loop and range()”, using a “while loop”, and using comprehension . Lists, tuples, dictionaries, and sets are iterable objects. They are the ‘containers’ that store the data to iterate . Each of these containers are able to iterate with the iter() command. . There are 2 types of iteration: define and indefinite. Define iteration clarifies how many times the loop is going to run, while indefinite specifies a condition that must be met . for variable in iterable: statement() . Iterator? Iterable? Iteration? .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2022/12/06/Lists-and-Iterations-Notes.html",
            "relUrl": "/markdown/2022/12/06/Lists-and-Iterations-Notes.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Title",
            "content": "words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] inp = input().lower() output = &quot;&quot; for letter in inp: for word in words: if letter == word[0]: output += word + &quot; &quot; print(inp + &quot; n&quot; + output) . whatever whiskey hotel alfa tango echo victor echo romeo . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] def print_matrix3(matrix): for i in matrix: print(*i) print_matrix3(keypad) . 1 2 3 4 5 6 7 8 9 0 . keyboard = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] # Birth Month print(str(keyboard[3][5]) + str(keyboard[1][8]) + str(keyboard[3][3]) + str(keyboard[1][2]) + str(keyboard[3][6]) + str(keyboard[3][4]) + str(keyboard[1][2]) + str(keyboard[1][3])) # Age print(str(keyboard[0][1]) + str(keyboard[0][6])) . NOVEMBER 16 .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/2022/12/06/Lists-and-Iterations-Hacks-Homework.html",
            "relUrl": "/2022/12/06/Lists-and-Iterations-Hacks-Homework.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Title",
            "content": "def method2(): truth_table = [[1,1], [1,0], [0,1], [0,0]] for a, b in truth_table: print(f&quot;and {a} &amp; {b}: {a &amp; b}&quot;) for a, b in truth_table: print(f&quot;nand ~({a} &amp; {b}): {((a &amp; b) + 1) % 2}&quot;) # warning: ~ negates entire integer without modulo for a, b in truth_table: print(f&quot;or {a} | {b}: {a | b}&quot;) for a, b in truth_table: print(f&quot;nor ~({a} | {b}): {((a | b) + 1) % 2}&quot;) # warning: see above for a, b in truth_table: print(f&quot;xor {a} ^ {b}: {a ^ b}&quot;) # call bitwise evaluation of truth table if __name__ == &quot;__main__&quot;: print(&quot;***** Method 2 *****&quot;) method2() . ***** Method 2 ***** and 1 &amp; 1: 1 and 1 &amp; 0: 0 and 0 &amp; 1: 0 and 0 &amp; 0: 0 nand ~(1 &amp; 1): 0 nand ~(1 &amp; 0): 1 nand ~(0 &amp; 1): 1 nand ~(0 &amp; 0): 1 or 1 | 1: 1 or 1 | 0: 1 or 0 | 1: 1 or 0 | 0: 0 nor ~(1 | 1): 0 nor ~(1 | 0): 0 nor ~(0 | 1): 0 nor ~(0 | 0): 1 xor 1 ^ 1: 0 xor 1 ^ 0: 1 xor 0 ^ 1: 1 xor 0 ^ 0: 0 .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/2022/12/02/JS-Truth-Table.html",
            "relUrl": "/2022/12/02/JS-Truth-Table.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Booleans and Conditionals",
            "content": "3.5 - Boolean Expressions . Here we will focus on: . basics of Booleans | its relationship with binary | relational operators | logical operators | . What is a boolean? . A data type with two possible values: true or fals . Boolean and Binary . So similar yet so different . Boolean math and binary notation both use the same two ciphers: 1 and 0. | However, please note that Boolean quantities are restricted to a singular bit | on the otherhand, binary numbers may be composed of many bits adding up in place-weighted form to any finite value, or size | . Must Knows . A boolean value is either true or false | The AP Exam will provide you with a reference sheet with the operators below. a = b a =/ b a &gt; b a &lt; b a &gt;= b a &lt;= b . | A few ways these operators could be used | equal, not equal, greater than, less than, greater than or equal to, less than or equal to (respectively) | . Logical Operators . These types of operators don’t necessarily deal with equivalent/non-equivalent values, but they rather work on operands to produce a singular bollean result . AND: returns TRUE if the operand around it are TRUE | OR: returns TRUE if at least one operand is TRUE | NOT: returns TRUE if the following boolean is FALSE | . Lesson 3.6 - Conditionals . Focusing on a Selection . Selection: uses a condition that evaluates to true or false Selection determines which part of an algorithm are executed based on a condition being true or false Algorithm is a finite set of instructions that accomplish a specific task . Conditional Statements . Also known as “if statements” can be seen as if statements or if blocks Ex: if (condition) [Block of Statements] can be seen as if else of if else-blocks Ex: if (condition) [Block of Statements] . x=20 y=10 if x &gt; y: print(“x is greater than y”) . x=20 y=10 if x&gt;y: print(“x is greater than y”) else: print(“x is not greater than y”) . Lesson 3.7 - nested Conditionals . Nested conditionals statements consist of conditional statements within other conditional statements | Utilizes “if else” statements within “if else” satements | basics of a nested conditional | . Analyzing Code Walkthrough . Pseuocode to the left, block code to the right | Approach the problem by going through each condition one at a time | decide which ones are false to skip and which ones are tru to execute | .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2022/12/02/Boolens-and-Conditionals.html",
            "relUrl": "/markdown/2022/12/02/Boolens-and-Conditionals.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Title",
            "content": "ProductCost = input(&quot;What is the cost of the product?&quot;) print(&quot;Cost: &quot; + ProductCost) ProductExpiration = input(&quot;Is this product expired? yes/no&quot;) print(&quot;Expired: &quot; + ProductExpiration) if (ProductExpiration == &quot;yes&quot;): print(&quot;this product is no good&quot;); else: if (ProductCost &gt; &quot;50&quot; and ProductExpiration == &quot;no&quot;): print(&quot;this product is too expensive&quot;) else: if(&quot;50&quot; &gt;= ProductCost &gt;= &quot;20&quot; and ProductExpiration == &quot;no&quot;): print(&quot;this is a regular product&quot;) else: if (&quot;20&quot; &gt; ProductCost &gt;= &quot;0&quot; and ProductExpiration == &quot;no&quot;): print(&quot;this is a cheap product&quot;) . Cost: 30 Expired: no this is a regular product . grade1 = 90 grade2 = 65 grade3 = 60 grade4 = 75 grade5 = 95 print((grade1 + grade2 + grade3 + grade4 + grade5)/5) . 77.0 . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;, 1 &gt; 2 or 5 &lt; 12) # Output TRUE using OR ^ # Output FALSE using NOT print(&quot;24 &gt; 8:&quot;, not 24 &gt; 8) # Output FALSE using AND print(&quot;10 &gt; 20:&quot;, 10 &gt; 20 and false) . 1 &gt; 2 or 5 &lt; 12: True 24 &gt; 8: False 10 &gt; 20: False . num1 = int(input()) num2 = int(input()) sum = num1 + num2 if sum == 200: print(&quot;200&quot;) else: print(sum) . 200 . person = int(input()) if person &lt; 8: print(&quot;person makes 50k&quot;) else: if 10 &gt; person &gt;= 8: print(&quot;person makes 90k&quot;) else: print(&quot;person makes 150k&quot;) . person makes 150k .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/2022/12/02/Booleans-and-Conditionals-Hw.html",
            "relUrl": "/2022/12/02/Booleans-and-Conditionals-Hw.html",
            "date": " • Dec 2, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Mathematical Expression and Strings",
            "content": "Mathematical Expression and Strings . Algorithms . An algorithm: a set of instructions that can accomplish a specific task . An Algorithm has three . Sequencing: Algorithms do taks in the order of specification | Selection: Helps choose two different outcomes based off a decision | Iteration: If a conditions is true, then the code can repeat | Algorithms can be Represented in Two Ways . 1.Flowcharts: Use shapes and arrows to represent the steps of an algorithm . Aflowcharts use shapes and arrows to represent the steps of an algorithm . different shapes represent different functions | For example, the circle represents the start and end whereas an arrow represents a relationship between relative shapes. There is also a rectangle, parallelogram, and diamond which have their specific functions. | Pseudocode: A blend of human language and coding format | . Arithmetic Operations . Arithmetic operations exist in most programming languages . Basic Operations . Subtraction: . represented by “-“ Ex: num1 = 2 - 1 | . Addition: . represented by “+” Ex: num1 = 2 +1 | . Multiplication . represented by “*” Ex: num1 = 2 * 1 | . Division . represented by “/” num1 = 2/1 | . Getting the Remainder represented by “MOD” (% in python) num1 = 5 % 2 . Different Uses . Items can be numbers or variables Example: num1 = 10 num2 = num1 -25 num3 = 100 * num1 num4 = num1 / num2 num5 = 9 % num4 . Order of Operations . Arithmetic operations in programming are performed in the same order as operations in mathematics: . operations in parentheses should be done first | division and multiplication should be done before addition and subtraction | modulus works similar to multiplication and division Example: Evaluate num1 num1 = 9 % 2 * (8 - 2) + 8 / (6 - 4) num1 = 10.0 | . Variables . Different Ways Values are Stored in Variables . Numerical value stored in a variable | Value of another variable stored in a variable | result of an operation stored in a variable | Result of a procedure call stored in a variable | score = 0 score = newScore score = newScore + 2 avgScore = allscores(20, 60, 80) . Sequencing is Important! . Changing the order of the steps changes the overall outcome, since every time the value assigned to a variable is changed, it overrides the last value which was assigned to the same variable. That is why it is important to track the value of variables, especially in code where the value is constantly changing. . num1 = 2 num2 = 4 num3 = 6 num1 = num2 + num3 num2 = num1 + num3 Vs. num1 = 2 num2 = 4 num3 = 6 num2 = num1 + num3 num1 = num2 + num3 . Tracking Variables . Tracking variables is a common question found on AP exams and is an important thing to keep in mind when writing any code. If the value of your variables changes a lot, not accounting for these changes can result in an unwanted outcome. . var1 = 9 var2 = 7 var3 = 2 print(var1) print(var2) print(var3) .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2022/11/29/mathematical-expressions-and-strings.html",
            "relUrl": "/markdown/2022/11/29/mathematical-expressions-and-strings.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Title",
            "content": "Num1 = 50 Num2 = Num1 % 9 + 15 # Num2 = 20 Num3 = Num2 / Num1 + ( Num2 * 2 ) # Num3 = 40 2/5 Num4 = Num3 + Num1 / 5 - 10 # Num4 = 40 2/5 Result = Num4 - Num2 # Result = 20 2/5 print(Result) . 20.4 . Num1 = 10 Num2 = Num1 % 3 * 4 # Num2 = 4 Num1 = Num2 #Num1 = 4 Num3 = Num1 * 3 # Num3 = 12 Result = Num3 % 2 # Result = 0 print(Result) . 0 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA # valueB = 17 - 4 = 13 valueA = valueA * 10 # valueA = 40 if valueB &gt; 10: print(valueC) # valueB is greater than 10 therefore output is valueC = 17 . 17 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length print(hair) #concat . straightbrownshort . Noun = &quot;Mr.Mortenson&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = Noun[0:7] yoda = Adjective2 + &quot; &quot; + Adjective + &quot; &quot; + abrev + &quot; &quot; + Verb + &quot;.&quot; print(yoda) . Very handsome Mr.Mort is. . cookie = &quot;choclate&quot; cookie2 = &quot;rasin&quot; len1 = len(cookie) / 2 len1 = str(len1) len2 = len(cookie2) * 45 len2 = str(len2) vote1 = cookie + &quot; vote: &quot; + len2 vote2 = cookie2 + &quot; vote: &quot; + len1 votes = vote1 + &quot; &quot; + vote2 print(votes) . choclate vote: 225 rasin vote: 4.0 .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/2022/11/29/Second-Hacks-Homework.html",
            "relUrl": "/2022/11/29/Second-Hacks-Homework.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Variables, Assignments, and Abstractions",
            "content": "Variables, Assignments, and Data Abstractions . An abstraction inside a program that can hold a value . Naming Variables . Tip: Make variables simple, easy to read, and relatively general for efficient code Ex: Do: highscore Don’t: highestscoreinthegame . Types of Data . Integer: numbers | Text: words | Boolean: states if something is true or false | Assignments . allows a program to be change the value represented by a variable assigns values to varibales . Examples . Example 1 a=1 a=b a=2 print(b) b=1 . will take the most recent value | . Example 2 num1 = 5 num2 = 9 num1 = num2 print(num1) 9 print(num2) 9 . Data Abstraction . represent data in a useful form; manages complexity . List and Indexes start at 1 | Maximum number is the # of elements in the list | string = ordered sequencce of characters | . 3 Types of List operations . Assigning values to a list of certain indicies | Creating an empty list and assigning it values | Assigning a copy of a list |",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2022/11/28/Variables-Assignments-Abstractions.html",
            "relUrl": "/markdown/2022/11/28/Variables-Assignments-Abstractions.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Title",
            "content": "QUESTIONS = { &quot;Which keyword do you use to loop over a given list of elements&quot;: [ &quot;for&quot;, &quot;while&quot;, &quot;each&quot;, &quot;loop&quot; ], &quot;What&#39;s the purpose of the built-in zip() function&quot;: [ &quot;To iterate over two or more sequences at the same time&quot;, &quot;To combine several strings into one&quot;, &quot;To compress several files into one archive&quot;, &quot;To get information from the user&quot;, ], &quot;What&#39;s the name of Python&#39;s sorting algorithm&quot;: [ &quot;Timsort&quot;, &quot;Quicksort&quot;, &quot;Merge sort&quot;, &quot;Bubble sort&quot; ], } for question, alternatives in QUESTIONS.items(): correct_answer = alternatives[0] sorted_alternatives = sorted(alternatives) for label, alternative in enumerate(sorted_alternatives): print(f&quot; {label}) {alternative}&quot;) answer_label = int(input(f&quot;{question}? &quot;)) answer = sorted_alternatives[answer_label] if answer == correct_answer: print(&quot;Correct!&quot;) else: print(f&quot;The answer is {correct_answer!r}, not {answer!r}&quot;) . 0) each 1) for 2) loop 3) while Correct! 0) To combine several strings into one 1) To compress several files into one archive 2) To get information from the user 3) To iterate over two or more sequences at the same time The answer is &#39;To iterate over two or more sequences at the same time&#39;, not &#39;To get information from the user&#39; 0) Bubble sort 1) Merge sort 2) Quicksort 3) Timsort The answer is &#39;Timsort&#39;, not &#39;Merge sort&#39; .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/2022/11/28/First-Hacks-Homework.html",
            "relUrl": "/2022/11/28/First-Hacks-Homework.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Markdown File",
            "content": "Markdown File . Favorite Food . My favorite food is: . Pizza . Pizza is the best because it is a wonderful combination of cheese, tomatoes, and dough. I like my Pizza best at Pizza Hut. . Hobbies . Soccer, Drawing, Running . . Lists . Best places to visit: . Italy | Japan | Nepal | . Best Soccer Players: . Ronaldo | Messi | Images . .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2022/11/18/markdown.html",
            "relUrl": "/markdown/2022/11/18/markdown.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Title",
            "content": "print(&quot;Hello World&quot;) . Hello World .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/2022/11/18/hello-world.html",
            "relUrl": "/2022/11/18/hello-world.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Title",
            "content": "echo &quot;show the shell&quot; . show the shell .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/2022/11/18/Bash.html",
            "relUrl": "/2022/11/18/Bash.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . . .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post47": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is not a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jonathanwuz.github.io/Jonathan-Wu-s-Repository/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}